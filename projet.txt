==== FICHIERS UTILES DU PROJET SYMFONY (avec contenu) ====

# config/routes.yaml

controllers:
    resource:
        path: ../src/Controller/
        namespace: App\Controller
    type: attribute


# config/services.yaml

# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones


# config/packages/validator.yaml

framework:
    validation:
        # Enables validator auto-mapping support.
        # For instance, basic validation constraints will be inferred from Doctrine's metadata.
        #auto_mapping:
        #    App\Entity\: []

when@test:
    framework:
        validation:
            not_compromised_password: false


# config/packages/twig.yaml

twig:
    file_name_pattern: '*.twig'

when@test:
    twig:
        strict_variables: true


# config/packages/monolog.yaml

monolog:
    handlers:
        doctrine:
            type: stream
            path: '%kernel.logs_dir%/doctrine.log'
            level: debug
            channels: [doctrine]


# config/packages/routing.yaml

framework:
    router:
        # Configure how to generate URLs in non-HTTP contexts, such as CLI commands.
        # See https://symfony.com/doc/current/routing.html#generating-urls-in-commands
        #default_uri: http://localhost

when@prod:
    framework:
        router:
            strict_requirements: null


# config/packages/framework.yaml

# see https://symfony.com/doc/current/reference/configuration/framework.html
framework:
    secret: '%env(APP_SECRET)%'
    #csrf_protection: true

    # Note that the session will be started ONLY if you read or write from it.
    session: true

    #esi: true
    #fragments: true

when@test:
    framework:
        test: true
        session:
            storage_factory_id: session.storage.factory.mock_file


# config/packages/security.yaml

security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
      app_user_provider:
        entity:
          class: App\Entity\User
          property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                # by default, the feature is enabled by checking a checkbox in the
                # login form, uncomment the following line to always enable it.
                #always_remember_me: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon


# config/packages/doctrine.yaml

doctrine:
    dbal:
        url: '%env(resolve:DATABASE_URL)%'

        # IMPORTANT: You MUST configure your server version,
        # either here or in the DATABASE_URL env var (see .env file)
        #server_version: '16'

        profiling_collect_backtrace: '%kernel.debug%'
        use_savepoints: true
        logging: true

    orm:
        auto_generate_proxy_classes: true
        enable_lazy_ghost_objects: true
        report_fields_where_declared: true
        validate_xml_mapping: true
        naming_strategy: doctrine.orm.naming_strategy.underscore_number_aware
        auto_mapping: true
        # logging: true
        mappings:
            App:
                type: attribute
                is_bundle: false
                dir: '%kernel.project_dir%/src/Entity'
                prefix: 'App\Entity'
                alias: App

when@test:
    doctrine:
        dbal:
            # "TEST_TOKEN" is typically set by ParaTest
            dbname_suffix: '_test%env(default::TEST_TOKEN)%'

when@prod:
    doctrine:
        orm:
            auto_generate_proxy_classes: false
            proxy_dir: '%kernel.build_dir%/doctrine/orm/Proxies'
            query_cache_driver:
                type: pool
                pool: doctrine.system_cache_pool
            result_cache_driver:
                type: pool
                pool: doctrine.result_cache_pool

    framework:
        cache:
            pools:
                doctrine.result_cache_pool:
                    adapter: cache.app
                doctrine.system_cache_pool:
                    adapter: cache.system


# config/packages/doctrine_migrations.yaml

doctrine_migrations:
    migrations_paths:
        # namespace is arbitrary but should be different from App\Migrations
        # as migrations classes should NOT be autoloaded
        'DoctrineMigrations': '%kernel.project_dir%/migrations'
    enable_profiler: false


# config/packages/csrf.yaml

# Enable stateless CSRF protection for forms and logins/logouts
framework:
    form:
        csrf_protection:
            token_id: submit

    csrf_protection:
        stateless_token_ids:
            - submit
            - authenticate
            - logout


# config/packages/cache.yaml

framework:
    cache:
        # Unique name of your app: used to compute stable namespaces for cache keys.
        #prefix_seed: your_vendor_name/app_name

        # The "app" cache stores to the filesystem by default.
        # The data in this cache should persist between deploys.
        # Other options include:

        # Redis
        #app: cache.adapter.redis
        #default_redis_provider: redis://localhost

        # APCu (not recommended with heavy random-write workloads as memory fragmentation can cause perf issues)
        #app: cache.adapter.apcu

        # Namespaced pools use the above "app" backend by default
        #pools:
            #my.dedicated.cache: null


# config/routes/framework.yaml

when@dev:
    _errors:
        resource: '@FrameworkBundle/Resources/config/routing/errors.xml'
        prefix: /_error


# config/routes/security.yaml

_security_logout:
    resource: security.route_loader.logout
    type: service


# src/Entity/User.php

<?php

namespace App\Entity;

use App\Repository\UserRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface;

#[ORM\Entity(repositoryClass: UserRepository::class)]
#[UniqueEntity(fields: ['email'], message: 'There is already an account with this email')]
#[ORM\Table(name: "users")]
class User implements UserInterface, PasswordAuthenticatedUserInterface
{
	#[ORM\Id]
	#[ORM\GeneratedValue]
	#[ORM\Column(type: 'integer')]
	private ?int $id = null;

	#[ORM\Column(type: 'string', length: 255)]
	private ?string $name = null;

	#[ORM\Column(type: 'string', length: 255, unique: true)]
	private ?string $email = null;

	#[ORM\Column(type: 'string')]
	private ?string $password = null;

	#[ORM\Column(type: 'boolean')]
	private bool $admin = false;

	#[ORM\Column(type: 'datetime', nullable: true)]
	private ?\DateTimeInterface $emailVerifiedAt = null;

	#[ORM\Column(type: 'string', length: 100, nullable: true)]
	private ?string $rememberToken = null;

	#[ORM\OneToMany(mappedBy: 'utilisateur', targetEntity: Order::class, orphanRemoval: true)]
	private Collection $commandes;

	public function __construct()
	{
		$this->commandes = new ArrayCollection();
	}

	// Getters & setters

	public function getId(): ?int
	{
		return $this->id;
	}

	public function getName(): ?string
	{
		return $this->name;
	}

	public function setName(string $name): self
	{
		$this->name = $name;
		return $this;
	}

	public function getEmail(): ?string
	{
		return $this->email;
	}

	public function setEmail(string $email): self
	{
		$this->email = $email;
		return $this;
	}

	public function getPassword(): ?string
	{
		return $this->password;
	}

	public function setPassword(string $password): self
	{
		$this->password = $password;
		return $this;
	}

	public function isAdmin(): bool
	{
		return $this->admin;
	}

	public function setAdmin(bool $admin): self
	{
		$this->admin = $admin;
		return $this;
	}

	public function getEmailVerifiedAt(): ?\DateTimeInterface
	{
		return $this->emailVerifiedAt;
	}

	public function setEmailVerifiedAt(?\DateTimeInterface $date): self
	{
		$this->emailVerifiedAt = $date;
		return $this;
	}

	public function getRememberToken(): ?string
	{
		return $this->rememberToken;
	}

	public function setRememberToken(?string $token): self
	{
		$this->rememberToken = $token;
		return $this;
	}

	/**
	 * @return Collection<int, Order>
	 */
	public function getCommandes(): Collection
	{
		return $this->commandes;
	}

	public function addCommande(Order $commande): self
	{
		if (!$this->commandes->contains($commande)) {
			$this->commandes[] = $commande;
			$commande->setUtilisateur($this);
		}
		return $this;
	}

	public function removeCommande(Order $commande): self
	{
		if ($this->commandes->removeElement($commande)) {
			if ($commande->getUtilisateur() === $this) {
				$commande->setUtilisateur(null);
			}
		}
		return $this;
	}
	public function getUserIdentifier(): string
	{
		return (string) $this->email;
	}

	public function getRoles(): array
	{
		return $this->admin ? ['ROLE_ADMIN'] : ['ROLE_USER'];
	}

	public function eraseCredentials(): void
	{
		// Laisser vide si rien à nettoyer
	}
}


# src/Entity/Order.php

<?php

namespace App\Entity;

use App\Repository\OrderRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: OrderRepository::class)]
#[ORM\Table(name: "orders")]
class Order
{
	#[ORM\Id]
	#[ORM\GeneratedValue]
	#[ORM\Column(type: 'integer')]
	private ?int $id = null;

	#[ORM\ManyToOne(inversedBy: 'commandes')]
	#[ORM\JoinColumn(nullable: false)]
	private ?User $utilisateur = null;

	#[ORM\Column(type: 'integer')]
	private int $totalPrice = 0;

	#[ORM\Column(type: 'string', length: 100)]
	private string $status;

	#[ORM\Column(type: 'datetime')]
	private \DateTimeInterface $createdAt;

	#[ORM\Column(type: 'datetime')]
	private \DateTimeInterface $updatedAt;

	#[ORM\OneToMany(mappedBy: 'commande', targetEntity: OrderItem::class, cascade: ['persist', 'remove'], orphanRemoval: true)]
	private Collection $articles;

	public function __construct()
	{
		$this->articles = new ArrayCollection();
		$this->createdAt = new \DateTime();
		$this->updatedAt = new \DateTime();
	}

	public function getId(): ?int
	{
		return $this->id;
	}

	public function getUtilisateur(): ?User
	{
		return $this->utilisateur;
	}

	public function setUtilisateur(?User $user): self
	{
		$this->utilisateur = $user;
		return $this;
	}

	public function getTotalPrice(): int
	{
		return $this->totalPrice;
	}

	public function setTotalPrice(int $value): self
	{
		$this->totalPrice = $value;
		return $this;
	}

	public function getStatus(): string
	{
		return $this->status;
	}

	public function setStatus(string $status): self
	{
		$this->status = $status;
		return $this;
	}

	public function getCreatedAt(): \DateTimeInterface
	{
		return $this->createdAt;
	}

	public function setCreatedAt(\DateTimeInterface $dt): self
	{
		$this->createdAt = $dt;
		return $this;
	}

	public function getUpdatedAt(): \DateTimeInterface
	{
		return $this->updatedAt;
	}

	public function setUpdatedAt(\DateTimeInterface $dt): self
	{
		$this->updatedAt = $dt;
		return $this;
	}

	/**
	 * @return Collection<int, OrderItem>
	 */
	public function getArticles(): Collection
	{
		return $this->articles;
	}

	public function addArticle(OrderItem $item): self
	{
		if (!$this->articles->contains($item)) {
			$this->articles[] = $item;
			$item->setCommande($this);
		}
		return $this;
	}

	public function removeArticle(OrderItem $item): self
	{
		if ($this->articles->removeElement($item)) {
			if ($item->getCommande() === $this) {
				$item->setCommande(null);
			}
		}
		return $this;
	}
}


# src/Entity/OrderItem.php

<?php

namespace App\Entity;

use App\Repository\OrderItemRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: OrderItemRepository::class)]
class OrderItem
{
	#[ORM\Id]
	#[ORM\GeneratedValue]
	#[ORM\Column(type: 'integer')]
	private ?int $id = null;

	#[ORM\ManyToOne(inversedBy: 'articles')]
	#[ORM\JoinColumn(nullable: false)]
	private ?Order $commande = null;

	#[ORM\ManyToOne(inversedBy: 'articles')]
	#[ORM\JoinColumn(nullable: false)]
	private ?Plant $plant = null;

	#[ORM\Column(type: 'integer')]
	private int $quantity;

	public function getId(): ?int
	{
		return $this->id;
	}

	public function getCommande(): ?Order
	{
		return $this->commande;
	}

	public function setCommande(?Order $order): self
	{
		$this->commande = $order;
		return $this;
	}

	public function getPlant(): ?Plant
	{
			return $this->plant;
	}

	public function setPlant(?Plant $plant): static
	{
			$this->plant = $plant;
			return $this;
	}

	public function getQuantity(): int
	{
		return $this->quantity;
	}

	public function setQuantity(int $qty): self
	{
		$this->quantity = $qty;
		return $this;
	}
}


# src/Entity/Plant.php

<?php

namespace App\Entity;

use App\Repository\PlantRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: PlantRepository::class)]
#[ORM\Table(name: "plants")]
class Plant
{
	#[ORM\Id]
	#[ORM\GeneratedValue]
	#[ORM\Column(type: 'integer')]
	private ?int $id = null;

	#[ORM\Column(type: 'string', length: 255)]
	private ?string $name = null;

	#[ORM\Column(type: 'integer')]
	private int $price;

	#[ORM\Column(type: 'text', nullable: true)]
	private ?string $description = null;

	#[ORM\Column(type: 'integer')]
	private int $stock;

	#[ORM\OneToMany(mappedBy: 'plante', targetEntity: OrderItem::class, orphanRemoval: true)]
	private Collection $articles;

	public function __construct()
	{
		$this->articles = new ArrayCollection();
	}

	public function getId(): ?int
	{
		return $this->id;
	}

	public function getName(): ?string
	{
		return $this->name;
	}

	public function setName(string $name): self
	{
		$this->name = $name;
		return $this;
	}

	public function getPrice(): int
	{
		return $this->price;
	}

	public function setPrice(int $price): self
	{
		$this->price = $price;
		return $this;
	}

	public function getDescription(): ?string
	{
		return $this->description;
	}

	public function setDescription(?string $description): self
	{
		$this->description = $description;
		return $this;
	}

	public function getStock(): int
	{
		return $this->stock;
	}

	public function setStock(int $stock): self
	{
		$this->stock = $stock;
		return $this;
	}

	/**
	 * @return Collection<int, OrderItem>
	 */
	public function getArticles(): Collection
	{
		return $this->articles;
	}

	public function addArticle(OrderItem $item): self
	{
		if (!$this->articles->contains($item)) {
			$this->articles[] = $item;
			$item->setPlante($this);
		}
		return $this;
	}

	public function removeArticle(OrderItem $item): self
	{
		if ($this->articles->removeElement($item)) {
			if ($item->getPlante() === $this) {
				$item->setPlante(null);
			}
		}
		return $this;
	}
}


# src/Controller/SecurityController.php

<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;
use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;

class SecurityController extends AbstractController
{
    #[Route(path: '/login', name: 'app_login')]
    public function login(AuthenticationUtils $authenticationUtils): Response
    {
        $error = $authenticationUtils->getLastAuthenticationError();
        $lastUsername = $authenticationUtils->getLastUsername();

        return $this->render('security/login.html.twig', [
            'last_username' => $lastUsername,
            'error' => $error,
        ]);
    }

    #[Route(path: '/logout', name: 'app_logout')]
    public function logout(): void
    {
        throw new \LogicException('Intercepté par le firewall Symfony.');
    }
}


# src/Controller/PanierController.php

<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class PanierController extends AbstractController
{
	#[Route('/panier', name: 'panier_index')]
	public function index(): Response
	{
		return $this->render('panier/index.html.twig');
	}
}


# src/Controller/Admin/PlanteController.php

<?php

namespace App\Controller\Admin;

use App\Entity\Plant;
use App\Form\PlanteType;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

#[Route('/admin/plantes')]
class PlanteController extends AbstractController
{
	#[Route('', name: 'admin_plantes_index')]
	public function index(EntityManagerInterface $gestionnaire): Response
	{
		$plantes = $gestionnaire->getRepository(Plant::class)->findBy([], ['name' => 'ASC']);
		return $this->render('admin/plante/index.html.twig', ['plantes' => $plantes]);
	}

	#[Route('/nouvelle', name: 'admin_plante_new')]
	public function create(Request $request, EntityManagerInterface $em): Response
	{
		$plante = new Plant();
		$form = $this->createForm(PlanteType::class, $plante);
		$form->handleRequest($request);

		if ($form->isSubmitted() && $form->isValid()) {
			$em->persist($plante);
			$em->flush();
			$this->addFlash('success', 'Plante ajoutée avec succès.');
			return $this->redirectToRoute('admin_plantes_index');
		}
		return $this->render('admin/plante/new.html.twig', ['form' => $form->createView()]);
	}

	#[Route('/{id}/modifier', name: 'admin_plante_edit')]
	public function edit(Plant $plant, Request $request, EntityManagerInterface $em): Response
	{
		$form = $this->createForm(PlanteType::class, $plant);
		$form->handleRequest($request);

		if ($form->isSubmitted() && $form->isValid()) {
			$em->flush();
			$this->addFlash('success', 'Plante modifiée avec succès.');
			return $this->redirectToRoute('admin_plantes_index');
		}
		return $this->render('admin/plante/edit.html.twig', ['form' => $form->createView(), 'plant' => $plant]);
	}

	#[Route('/{id}', name: 'admin_plante_delete', methods: ['POST'])]
	public function delete(Request $request, Plant $plant, EntityManagerInterface $em): Response
	{
		if ($this->isCsrfTokenValid('delete' . $plant->getId(), $request->request->get('_token'))) {
			$em->remove($plant);
			$em->flush();
		}
		$this->addFlash('success', 'Plante supprimée.');
		return $this->redirectToRoute('admin_plantes_index');
	}
}


# src/Controller/Admin/UtilisateurController.php

<?php

namespace App\Controller\Admin;

use App\Entity\User;
use App\Form\UserType;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Symfony\Component\Routing\Annotation\Route;

#[Route('/admin/utilisateurs')]
class UtilisateurController extends AbstractController
{
	#[Route('', name: 'admin_utilisateurs_index')]
	public function index(EntityManagerInterface $em): Response
	{
		$users = $em->getRepository(User::class)->findBy([], ['admin' => 'DESC', 'name' => 'ASC']);
		return $this->render('admin/utilisateur/index.html.twig', ['users' => $users]);
	}

	#[Route('/nouveau', name: 'admin_users_create')]
	public function create(Request $request, EntityManagerInterface $em, UserPasswordHasherInterface $hasher): Response
	{
		$user = new User();
		$form = $this->createForm(UserType::class, $user);
		$form->handleRequest($request);

		if ($form->isSubmitted() && $form->isValid()) {
			$plainPassword = $form->get('plainPassword')->getData();
			if ($plainPassword) {
				$user->setPassword($hasher->hashPassword($user, $plainPassword));
			}
			$em->persist($user);
			$em->flush();
			$this->addFlash('success', 'Utilisateur créé avec succès.');
			return $this->redirectToRoute('admin_utilisateurs_index');
		}

		return $this->render('admin/utilisateur/new.html.twig', [
			'userForm' => $form->createView()
		]);
	}

	#[Route('/{id}', name: 'admin_users_show', methods: ['GET'])]
	public function show(User $user): Response
	{
		return $this->render('admin/utilisateur/show.html.twig', [
			'user' => $user
		]);
	}

	#[Route('/{id}/modifier', name: 'admin_users_edit')]
	public function edit(User $user, Request $request, EntityManagerInterface $em, UserPasswordHasherInterface $hasher): Response
	{
		$form = $this->createForm(UserType::class, $user);
		$form->remove('plainPassword');
		$form->handleRequest($request);

		if ($form->isSubmitted() && $form->isValid()) {
			$em->flush();
			$this->addFlash('success', 'Utilisateur modifié avec succès.');
			return $this->redirectToRoute('admin_utilisateurs_index');
		}

		return $this->render('admin/utilisateur/edit.html.twig', [
			'userForm' => $form->createView(),
			'user' => $user
		]);
	}

	#[Route('/{id}/supprimer', name: 'admin_users_delete', methods: ['POST'])]
	public function delete(Request $request, User $user, EntityManagerInterface $em): Response
	{
		if ($this->isCsrfTokenValid('delete' . $user->getId(), $request->request->get('_token'))) {
			$em->remove($user);
			$em->flush();
		}
		$this->addFlash('success', 'Utilisateur supprimé.');
		return $this->redirectToRoute('admin_utilisateurs_index');
	}
}


# src/Controller/PlanteController.php

<?php

namespace App\Controller;

use App\Entity\Plant;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class PlanteController extends AbstractController
{
	#[Route('/', name: 'accueil')]
	public function index(EntityManagerInterface $gestionnaire): Response
	{
		$plantes = $gestionnaire->getRepository(Plant::class)->createQueryBuilder('p')
			->where('p.stock > 0')
			->orderBy('p.name', 'ASC')
			->getQuery()
			->getResult();

		return $this->render('plante/index.html.twig', ['plants' => $plantes]);
	}

	#[Route('/plantes/{id}', name: 'plante_afficher')]
	public function show(Plant $plante): Response
	{
		return $this->render('plante/show.html.twig', ['plante' => $plante]);
	}
}


# src/Controller/UtilisateurController.php

<?php

namespace App\Controller;

use App\Entity\User;
use App\Form\UserType;
use App\Security\LoginFormAuthenticator;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Http\Authentication\UserAuthenticatorInterface;

class UtilisateurController extends AbstractController
{
    #[Route('/utilisateurs/{id}', name: 'utilisateur_afficher')]
    public function show(User $utilisateur): Response
    {
        $this->denyAccessUnlessGranted('IS_AUTHENTICATED_FULLY');
        return $this->render('utilisateur/show.html.twig', [
            'utilisateur' => $utilisateur,
        ]);
    }

    #[Route('/utilisateurs/{id}/modifier', name: 'utilisateur_modifier')]
    public function edit(
        Request $request,
        User $utilisateur,
        EntityManagerInterface $em,
        UserAuthenticatorInterface $authenticator,
        LoginFormAuthenticator $loginAuthenticator
    ): Response {
        $this->denyAccessUnlessGranted('IS_AUTHENTICATED_FULLY');

        $form = $this->createForm(UserType::class, $utilisateur, [
            'validation_groups' => ['Default'],
        ]);
				$form->remove('admin');
        $form->remove('plainPassword');
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            // on persiste (entité déjà managed) et flush
            $em->persist($utilisateur);
            $em->flush();

            // réauthentification si c'est l'utilisateur connecté
            if ($utilisateur === $this->getUser()) {
                $response = $authenticator->authenticateUser(
                    $utilisateur,
                    $loginAuthenticator,
                    $request
                );
                if ($response instanceof Response) {
                    return $response;
                }
            }

            return $this->redirectToRoute('accueil');
        }

        return $this->render('utilisateur/edit.html.twig', [
            'userForm'    => $form->createView(),
            'utilisateur' => $utilisateur,
        ]);
    }
}


# src/Controller/CommandeController.php

<?php

namespace App\Controller;

use App\Entity\Order;
use App\Entity\OrderItem;
use App\Entity\Plante;
use Psr\Log\LoggerInterface;
use App\Repository\PlanteRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Security\Http\Attribute\IsGranted;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class CommandeController extends AbstractController
{
	#[Route('/commandes', name: 'commandes_index')]
	public function index(): Response
	{
		$utilisateur = $this->getUser();
		$commandes = $utilisateur->getCommandes();

		return $this->render('commande/index.html.twig', ['orders' => $commandes]);
	}

	#[Route('/commandes/nouvelle', name: 'commande_creer')]
	#[IsGranted('IS_AUTHENTICATED_FULLY')]
	public function create(): Response
	{
		return $this->render('commande/new.html.twig');
	}

	#[Route('/commandes', name: 'commande_enregistrer', methods: ['POST'])]
	public function store(Request $requete, EntityManagerInterface $gestionnaire, PlanteRepository $repo, LoggerInterface $logger): Response
	{
		$logger->info('CommandeController::store appelé', [
			'request_items' => $requete->get('items')
		]);
		$donnees = json_decode($requete->get('items'), true);
		$this->get('logger')->info('Items reçus : ' . print_r($donnees, true));
		$total = 0;

		$commande = new Order();
		$commande->setUtilisateur($this->getUser());
		$commande->setStatus('confirmed');
		$commande->setTotalPrice(0); // Initialisation

		$gestionnaire->persist($commande); // Persist AVANT la création des items

		if (empty($donnees)) {
			return new Response('Aucun item reçu ou JSON malformé : ' . $requete->get('items'), 400);
		}
		foreach ($donnees as $ligne) {
			$plante = $repo->find($ligne['plant_id']);
			if ($plante->getStock() < $ligne['quantity']) {
				return $this->redirectToRoute('commande_creer', [], Response::HTTP_SEE_OTHER);
			}
			$plante->setStock($plante->getStock() - $ligne['quantity']);
			$item = new OrderItem();
			$item->setPlant($plante);
			$item->setQuantity($ligne['quantity']);
			$item->setCommande($commande);
			$total += $plante->getPrice() * $ligne['quantity'];
			$gestionnaire->persist($item);
		}
		$commande->setTotalPrice($total); // Mise à jour du total calculé
		$gestionnaire->flush();
		$this->addFlash('success', 'Commande enregistrée avec succès.');
		return $this->redirectToRoute('commande_creer', ['success' => true]);
	}
}


# src/Controller/RegistrationController.php

<?php

namespace App\Controller;

use App\Entity\User;
use App\Form\RegistrationForm;
use App\Security\LoginFormAuthenticator;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Bundle\SecurityBundle\Security;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Symfony\Component\Routing\Attribute\Route;

class RegistrationController extends AbstractController
{
	#[Route('/register', name: 'app_register')]
	public function register(Request $request, UserPasswordHasherInterface $userPasswordHasher, Security $security, EntityManagerInterface $entityManager): Response
	{
		$user = new User();
		$form = $this->createForm(RegistrationForm::class, $user);
		$form->handleRequest($request);

		if ($form->isSubmitted()) {
			$plainPassword = $form->get('plainPassword')->getData();
			$confirmPassword = $form->get('confirmPassword')->getData();

			if ($plainPassword !== $confirmPassword) {
				$form->get('confirmPassword')->addError(new \Symfony\Component\Form\FormError('Les mots de passe ne correspondent pas.'));
			} elseif ($form->isValid()) {
				$user->setPassword($userPasswordHasher->hashPassword($user, $plainPassword));
				$entityManager->persist($user);
				$entityManager->flush();

				return $security->login($user, LoginFormAuthenticator::class, 'main');
			}
		}

		return $this->render('registration/register.html.twig', [
			'registerForm' => $form,
		]);
	}
}


# src/Form/PlanteType.php

<?php

namespace App\Form;

use App\Entity\Plant;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class PlanteType extends AbstractType
{
	public function buildForm(FormBuilderInterface $builder, array $options): void
	{
		$builder
			->add('name', TextType::class, [
				'label' => 'Nom'
			])
			->add('price', IntegerType::class, [
				'label' => 'Prix (€)'
			])
			->add('description', TextareaType::class, [
				'label' => 'Description',
				'required' => false
			])
			->add('stock', IntegerType::class, [
				'label' => 'Stock'
			]);
	}

	public function configureOptions(OptionsResolver $resolver): void
	{
		$resolver->setDefaults([
			'data_class' => Plant::class,
		]);
	}
}


# src/Form/RegistrationForm.php

<?php

namespace App\Form;

use App\Entity\User;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Validator\Constraints\Length;
use Symfony\Component\Validator\Constraints\NotBlank;

class RegistrationForm extends AbstractType
{
	public function buildForm(FormBuilderInterface $builder, array $options): void
	{
		$builder
			->add('name', TextType::class, [
				'label' => 'Nom'
			])
			->add('email', EmailType::class, [
				'label' => 'Email'
			])
			->add('plainPassword', PasswordType::class, [
				'mapped' => false,
				'label' => 'Mot de passe',
				'attr' => ['autocomplete' => 'new-password'],
				'constraints' => [
					new NotBlank([
						'message' => 'Entrez un mot de passe',
					]),
					new Length([
						'min' => 6,
						'minMessage' => 'Mot de passe minimum : {{ limit }} caractères',
						'max' => 4096,
					]),
				],
			])
			->add('confirmPassword', PasswordType::class, [
				'mapped' => false,
				'label' => 'Confirmation',
				'attr' => ['autocomplete' => 'new-password'],
				'constraints' => [
					new NotBlank([
						'message' => 'Confirmez le mot de passe',
					]),
				],
			]);
	}

	public function configureOptions(OptionsResolver $resolver): void
	{
		$resolver->setDefaults([
			'data_class' => User::class,
		]);
	}
}


# src/Form/UserType.php

<?php

namespace App\Form;

use App\Entity\User;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Validator\Constraints\Length;
use Symfony\Component\Validator\Constraints\NotBlank;

class UserType extends AbstractType
{
	public function buildForm(FormBuilderInterface $builder, array $options): void
	{
		$builder
			->add('name', TextType::class, [
				'label' => 'Nom'
			])
			->add('email', EmailType::class, [
				'label' => 'Email'
			])
			->add('admin', CheckboxType::class, [
				'label' => 'Administrateur',
				'required' => false
			])
			->add('plainPassword', PasswordType::class, [
				'mapped' => false,
				'required' => false,
				'label' => 'Mot de passe',
				'attr' => ['autocomplete' => 'new-password'],
				'constraints' => [],
			]);
	}

	public function configureOptions(OptionsResolver $resolver): void
	{
		$resolver->setDefaults([
			'data_class' => User::class,
		]);
	}
}


# templates/admin/utilisateur/edit.html.twig

{% extends 'base.html.twig' %}

{% block title %}Modifier l'utilisateur
{% endblock %}

{% block body %}
	<h1 class="mb-4">Modifier l'utilisateur</h1>

	{{ form_start(userForm) }}

	<div class="mb-3">
		{{ form_label(userForm.name) }}
		{{ form_widget(userForm.name, {'attr': {'class': 'form-control'}}) }}
		{{ form_errors(userForm.name) }}
	</div>

	<div class="mb-3">
		{{ form_label(userForm.email) }}
		{{ form_widget(userForm.email, {'attr': {'class': 'form-control'}}) }}
		{{ form_errors(userForm.email) }}
	</div>

	<div class="form-check mb-3">
		{{ form_widget(userForm.admin, {'attr': {'class': 'form-check-input'}}) }}
		{{ form_label(userForm.admin, null, {'label_attr': {'class': 'form-check-label'}}) }}
		{{ form_errors(userForm.admin) }}
	</div>

	<button class="btn btn-warning">Mettre à jour</button>

	{{ form_rest(userForm) }}
	{{ form_end(userForm) }}
{% endblock %}


# templates/admin/utilisateur/show.html.twig

{% extends 'base.html.twig' %}

{% block title %}Fiche utilisateur{% endblock %}

{% block body %}
  <h1 class="mb-4">Fiche utilisateur</h1>

  <div class="card">
    <div class="card-body">
      <h5 class="card-title">{{ user.name }}</h5>
      <p><strong>Email :</strong> {{ user.email }}</p>
      <p><strong>Administrateur :</strong> {{ user.admin ? 'Oui' : 'Non' }}</p>

      <a href="{{ path('admin_users_edit', { id: user.id }) }}" class="btn btn-warning">Modifier</a>
      <form method="POST" action="{{ path('admin_users_delete', { id: user.id }) }}" class="d-inline" onsubmit="return confirm('Supprimer ?')">
        <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ user.id) }}">
        <button class="btn btn-danger">Supprimer</button>
      </form>
    </div>
  </div>
{% endblock %}


# templates/admin/utilisateur/index.html.twig

{% extends 'base.html.twig' %}

{% block title %}Gestion des Utilisateurs
{% endblock %}

{% block body %}
	<h1 class="mb-4">Liste des utilisateurs</h1>

	<table class="table table-striped table-hover">
		<thead class="table-danger">
			<tr>
				<th>Nom</th>
				<th>Email</th>
				<th>Admin</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody>
			{% for user in users %}
				<tr>
					<td>
						<a href="{{ path('admin_users_show', { id: user.id }) }}" class="text-decoration-none text-dark">
							{{ user.name }}
						</a>
					</td>
					<td>{{ user.email }}</td>
					<td>
						{% if user.admin %}
							<span class="badge bg-success">Oui</span>
						{% else %}
							<span class="badge bg-secondary">Non</span>
						{% endif %}
					</td>
					<td>
						<a href="{{ path('admin_users_edit', {id: user.id}) }}" class="btn btn-warning btn-sm">Modifier</a>
						<form method="POST" action="{{ path('admin_users_delete', {id: user.id}) }}" onsubmit="return confirm('Supprimer cet utilisateur ?')" class="d-inline">
							<input type="hidden" name="_token" value="{{ csrf_token('delete' ~ user.id) }}">
							<button class="btn btn-danger btn-sm">Supprimer</button>
						</form>
					</td>
				</tr>
			{% endfor %}
		</tbody>
	</table>
{% endblock %}


# templates/admin/plante/edit.html.twig

{% extends 'base.html.twig' %}

{% block title %}Modifier la Plante{% endblock %}

{% block body %}
	<h1 class="mb-4">Modifier la Plante</h1>

	{{ form_start(form) }}

	<div class="mb-3">
		{{ form_label(form.name) }}
		{{ form_widget(form.name, {'attr': {'class': 'form-control'}}) }}
		{{ form_errors(form.name) }}
	</div>

	<div class="mb-3">
		{{ form_label(form.price) }}
		{{ form_widget(form.price, {'attr': {'class': 'form-control'}}) }}
		{{ form_errors(form.price) }}
	</div>

	<div class="mb-3">
		{{ form_label(form.description) }}
		{{ form_widget(form.description, {'attr': {'class': 'form-control'}}) }}
		{{ form_errors(form.description) }}
	</div>

	<div class="mb-3">
		{{ form_label(form.stock) }}
		{{ form_widget(form.stock, {'attr': {'class': 'form-control'}}) }}
		{{ form_errors(form.stock) }}
	</div>

	<button type="submit" class="btn btn-warning">Mettre à jour</button>

	{{ form_widget(form._token) }}
	{{ form_end(form, {'render_rest': false}) }}
{% endblock %}


# templates/admin/plante/index.html.twig

{% extends 'base.html.twig' %}

{% block title %}Admin - Plantes
{% endblock %}

{% block body %}
	<h1 class="mb-4">Gestion des plantes</h1>
	<a class="btn btn-danger rounded-3 mb-3" href="{{ path('admin_plante_new') }}">Nouvelle plante</a>

	<table class="table table-hover table-bordered rounded-3 overflow-hidden">
		<thead class="table-danger">
			<tr>
				<th>Nom</th>
				<th>Prix</th>
				<th>Stock</th>
				<th class="text-center">Actions</th>
			</tr>
		</thead>
		<tbody>
			{% for plant in plantes %}
				<tr>
					<td>
						<a href="{{ path('plante_afficher', { id: plant.id }) }}" class="text-decoration-none text-dark">
							{{ plant.name }}
						</a>
					</td>
					<td>{{ plant.price }}
						€</td>
					<td>{{ plant.stock }}</td>
					<td class="text-center">
						<a class="btn btn-sm btn-outline-dark rounded-3" href="{{ path('admin_plante_edit', {id: plant.id}) }}">✏</a>
						<form method="post" action="{{ path('admin_plante_delete', {id: plant.id}) }}" class="d-inline" onsubmit="return confirm('Supprimer ?')">
							<input type="hidden" name="_token" value="{{ csrf_token('delete' ~ plant.id) }}">
							<button class="btn btn-sm btn-danger rounded-3">🗑</button>
						</form>
					</td>
				</tr>
			{% endfor %}
		</tbody>
	</table>
{% endblock %}


# templates/admin/plante/new.html.twig

{% extends 'base.html.twig' %}

{% block title %}Nouvelle Plante{% endblock %}

{% block body %}
	<h1 class="mb-4">Ajouter une Nouvelle Plante</h1>

	{{ form_start(form, {'method': 'POST'}) }}

	<div class="mb-3">
		{{ form_label(form.name) }}
		{{ form_widget(form.name, {'attr': {'class': 'form-control'}}) }}
		{{ form_errors(form.name) }}
	</div>

	<div class="mb-3">
		{{ form_label(form.price) }}
		{{ form_widget(form.price, {'attr': {'class': 'form-control'}}) }}
		{{ form_errors(form.price) }}
	</div>

	<div class="mb-3">
		{{ form_label(form.description) }}
		{{ form_widget(form.description, {'attr': {'class': 'form-control'}}) }}
		{{ form_errors(form.description) }}
	</div>

	<div class="mb-3">
		{{ form_label(form.stock) }}
		{{ form_widget(form.stock, {'attr': {'class': 'form-control'}}) }}
		{{ form_errors(form.stock) }}
	</div>

	<button type="submit" class="btn btn-success">Créer</button>

	{{ form_widget(form._token) }}
	{{ form_end(form, {'render_rest': false}) }}
{% endblock %}


# templates/user/account.html.twig

{% extends 'base.html.twig' %}

{% block title %}Mon profil{% endblock %}

{% block body %}
  <h1>Mon profil</h1>
  <p><strong>Nom :</strong> {{ user.name }}</p>
  <p><strong>Email :</strong> {{ user.email }}</p>
  <a class="btn btn-danger rounded-3" href="{{ path('user_edit', {id: user.id}) }}">Modifier</a>
{% endblock %}


# templates/utilisateur/edit.html.twig

{% extends 'base.html.twig' %}

{% block title %}Modifier mon profil
{% endblock %}

{% block body %}
	<h1 class="mb-4">Modifier mon profil</h1>

	{{ form_start(userForm, {'method': 'POST'}) }}

	<div class="mb-3">
		{{ form_label(userForm.name) }}
		{{ form_widget(userForm.name, {'attr': {'class': 'form-control'}}) }}
		{{ form_errors(userForm.name) }}
	</div>

	<div class="mb-3">
		{{ form_label(userForm.email) }}
		{{ form_widget(userForm.email, {'attr': {'class': 'form-control'}}) }}
		{{ form_errors(userForm.email) }}
	</div>

	<button class="btn btn-primary">Enregistrer</button>

	{{ form_rest(userForm) }}
	{{ form_end(userForm) }}
{% endblock %}


# templates/utilisateur/show.html.twig

{% extends 'base.html.twig' %}

{% block title %}Profil{% endblock %}

{% block body %}
  <h1 class="mb-4">Profil</h1>

  <div class="card mb-4">
    <div class="card-body">
      <h5 class="card-title">{{ utilisateur.name }}</h5>
      <p><strong>Email:</strong> {{ utilisateur.email }}</p>
      <p><strong>Administrateur:</strong> {{ utilisateur.admin ? 'Oui' : 'Non' }}</p>

      <a href="{{ path('utilisateur_modifier', { id: utilisateur.id }) }}" class="btn btn-danger">Modifier</a>
    </div>
  </div>
{% endblock %}


# templates/utilisateur/index.html.twig

{% extends 'base.html.twig' %}

{% block title %}Hello UtilisateurController!{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
</style>

<div class="example-wrapper">
    <h1>Hello {{ controller_name }}! ✅</h1>

    This friendly message is coming from:
    <ul>
        <li>Your controller at <code>/home/tilnede0x1182/code/tilnede0x1182/Personnel/2025/Entrainement/PHP/Symfony/plant_shop_php_symfony/src/Controller/UtilisateurController.php</code></li>
        <li>Your template at <code>/home/tilnede0x1182/code/tilnede0x1182/Personnel/2025/Entrainement/PHP/Symfony/plant_shop_php_symfony/templates/utilisateur/index.html.twig</code></li>
    </ul>
</div>
{% endblock %}


# templates/base.html.twig

<!DOCTYPE html>
<html lang="fr">
	<head>
		<meta charset="UTF-8">
		<title>
			{% block title %}PlantShop
			{% endblock %}
		</title>
		<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
		<link
		rel="stylesheet" href="/css/custom.css">
	{# Votre CSS personnalisé #}
	</head>
	<body class="bg-light">
		{% include 'partials/_navbar.html.twig' %}
		<main class="container my-4">
			{% include 'partials/_flash.html.twig' %}
			{% block body %}{% endblock %}
		</main>
		<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
		<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
		<script src="/js/cart.js" defer></script>
		{% block javascripts %}{% endblock %}
	</body>
</html>


# templates/commande/success.html.twig

{% extends 'base.html.twig' %}

{% block title %}Commande réussie{% endblock %}

{% block body %}
  <h1 class="text-center mb-4">✅ Commande Confirmée</h1>

  <div class="alert alert-success text-center">
    <h3>Merci pour votre commande !</h3>
    <p>Votre commande a été confirmée avec succès. Vous recevrez un email de confirmation avec tous les détails.</p>
    <a href="{{ path('home') }}" class="btn btn-primary">Retour à l'accueil</a>
  </div>
{% endblock %}


# templates/commande/index.html.twig

{% extends 'base.html.twig' %}

{% block title %}Mes commandes{% endblock %}

{% block body %}
  <h1 class="text-center mb-4">📜 Mes commandes</h1>

  {% if orders is empty %}
    <p class="alert alert-info">Aucune commande.</p>
  {% else %}
    <div class="list-group">
      {% for order in orders %}
        <div class="list-group-item">
          <h5 class="mb-1">Commande n°{{ loop.index }}</h5>
          <p class="text-muted mb-1">Passée le {{ order.createdAt|date('d/m/Y H:i') }} — Total : {{ order.totalPrice }} €</p>
          <ul class="mb-2">
            {% for item in order.articles %}
              <li>{{ item.plant.name }} × {{ item.quantity }} – {{ item.plant.price }} €</li>
            {% endfor %}
          </ul>
          <p><strong>Statut :</strong> {{ order.status }}</p>
        </div>
      {% endfor %}
    </div>
  {% endif %}
{% endblock %}


# templates/commande/new.html.twig

{% extends 'base.html.twig' %}

{% block title %}Nouvelle commande{% endblock %}

{% block body %}
  <h1 class="text-center mb-4">🧾 Nouvelle commande</h1>

  <div id="order-review-container">
    <p class="alert alert-info">Chargement de votre commande...</p>
  </div>

  <form id="order-form" method="POST" action="{{ path('commande_enregistrer') }}" class="mt-3">
    <input type="hidden" name="items" id="order-items-input">
    <button type="submit" class="btn btn-success w-100 rounded-3">Confirmer la commande</button>
  </form>
{% endblock %}

{% block javascripts %}
  <script>
    window.addEventListener("DOMContentLoaded", () => {
      if (window.Cart && typeof window.Cart.renderOrderReview === "function") {
        window.Cart.renderOrderReview();
      }
    });
  </script>
{% endblock %}


# templates/commande/checkout.html.twig

{% extends 'base.html.twig' %}

{% block title %}Validation de la commande{% endblock %}

{% block body %}
  <h1 class="text-center mb-4">Valider ma commande</h1>

  <div id="order-review-container">
    <p class="alert alert-info">Chargement de votre commande...</p>
  </div>

  <form id="order-form" method="POST" action="{{ path('orders_store') }}" class="mt-3">
    <input type="hidden" name="items" id="order-items-input">
    <button type="submit" class="btn btn-success w-100 rounded-3">Confirmer la commande</button>
  </form>
{% endblock %}


# templates/plante/show.html.twig

{% extends 'base.html.twig' %}

{% block title %}
	{{ plante.name }}
{% endblock %}

{% block body %}
	<div class="card shadow-lg rounded-3">
		<div class="card-body">
			<h1 class="card-title">{{ plante.name }}</h1>

			<p>
				<strong>Prix :</strong>
				{{ plante.price }}
				€</p>

			{% if plante.description %}
				<p>
					<strong>Description :</strong>
					{{ plante.description }}</p>
			{% endif %}

			<p>
				<strong>Stock :</strong>
				{{ plante.stock }}</p>

			<div class="d-flex gap-2 flex-wrap mb-3">
				<button class="btn btn-success rounded-3" onclick="window.Cart.add({{ plante.id }}, '{{ plante.name|e('js') }}', {{ plante.price }}, {{ plante.stock }})">
					Ajouter au panier
				</button>

				{% if app.user and app.user.admin %}
					<a href="{{ path('admin_plante_edit', { id: plante.id }) }}" class="btn btn-warning rounded-3">Modifier</a>
					<form method="POST" action="{{ path('admin_plante_delete', { id: plante.id }) }}" class="d-inline" onsubmit="return confirm('Supprimer ?')">
						<input type="hidden" name="_token" value="{{ csrf_token('delete' ~ plante.id) }}">
						<button class="btn btn-danger rounded-3">Supprimer</button>
					</form>
				{% endif %}
			</div>


			<a class="btn btn-secondary rounded-3" href="{{ path('accueil') }}">Retour</a>
		</div>
	</div>
{% endblock %}


# templates/plante/index.html.twig

{% extends 'base.html.twig' %}

{% block title %}Liste des plantes{% endblock %}

{% block body %}
  <h1 class="text-center mb-4">🌿 Liste des plantes</h1>

  {% if app.user and app.user.admin %}
    <a class="btn btn-warning mb-3 rounded-3" href="{{ path('admin_plante_new') }}">Nouvelle plante</a>
  {% endif %}

  <div class="row">
    {% for plant in plants %}
      <div class="col-md-4">
        <div class="card mb-4 shadow-sm">
          <div class="card-body">
            <h5 class="card-title">
              <a class="text-decoration-none text-dark" href="{{ path('plante_afficher', {'id': plant.id}) }}">{{ plant.name }}</a>
            </h5>
            <p class="card-text">
              <strong>Prix :</strong> {{ plant.price }} €
              {% if app.user and app.user.admin %}
                <br><strong>Stock :</strong> {{ plant.stock }}
              {% endif %}
            </p>
            <button class="btn btn-success w-100 rounded-3"
                    onclick="window.Cart.add({{ plant.id }}, '{{ plant.name }}', {{ plant.price }}, {{ plant.stock }})">
              Ajouter au panier
            </button>
          </div>
        </div>
      </div>
    {% endfor %}
  </div>
{% endblock %}


# templates/security/login.html.twig

{% extends 'base.html.twig' %}

{% block title %}Connexion
{% endblock %}

{% block body %}
	<h1 class="text-center mb-4">Connexion</h1>

	{% if error %}
		<div class="alert alert-danger">{{ error.messageKey|trans(error.messageData, 'security') }}</div>
	{% endif %}

	<form method="POST" action="{{ path('app_login') }}" class="w-100" style="max-width: 500px;">
		<input type="hidden" name="_csrf_token" value="{{ csrf_token('authenticate') }}">
		<div class="mb-3">
			<label for="email" class="form-label">Email</label>
			<input type="email" name="email" id="email" class="form-control" value="{{ last_username }}">
		</div>

		<div class="mb-3">
			<label for="password" class="form-label">Mot de passe</label>
			<input type="password" name="password" id="password" class="form-control">
		</div>

		<button type="submit" class="btn btn-primary w-100">Se connecter</button>
	</form>
{% endblock %}


# templates/panier/index.html.twig

{% extends 'base.html.twig' %}

{% block title %}Mon Panier
{% endblock %}

{% block body %}
	<h1 class="text-center mb-4">🛒 Mon Panier</h1>

	{% if app.session.get('alert') %}
		<div class="alert alert-danger">{{ app.session.get('alert') }}</div>
	{% endif %}

	{% if app.session.get('stock_adjust') %}
		<div class="alert alert-warning mt-2" role="alert" data-stock-adjust='{{ app.session.get('stock_adjust')|json_encode() }}'>
			Stock ajusté automatiquement sur un ou plusieurs articles.
		</div>
	{% endif %}

	<div id="cart-container">
		<p class="alert alert-info">Chargement du panier...</p>
	</div>

	<div id="cart-actions" class="d-flex justify-content-between mt-4 d-none">
		<button class="btn btn-outline-secondary" onclick="window.Cart.clear()">Vider le panier</button>
		<a href="{{ path('commande_creer') }}" class="btn btn-success">Passer la commande</a>
	</div>
{% endblock %}


# templates/registration/register.html.twig

{% extends 'base.html.twig' %}

{% block title %}Inscription
{% endblock %}

{% block body %}
	<h1 class="text-center mb-4">S'inscrire</h1>

	<form method="POST" action="{{ path('app_register') }}" class="w-100" style="max-width: 500px;">
		{{ form_start(registerForm) }}

		<div class="mb-3">
			{{ form_label(registerForm.name) }}
			{{ form_widget(registerForm.name, {'attr': {'class': 'form-control'}}) }}
			{{ form_errors(registerForm.name) }}
		</div>

		<div class="mb-3">
			{{ form_label(registerForm.email) }}
			{{ form_widget(registerForm.email, {'attr': {'class': 'form-control'}}) }}
			{{ form_errors(registerForm.email) }}
		</div>

		<div class="mb-3">
			{{ form_label(registerForm.plainPassword) }}
			{{ form_widget(registerForm.plainPassword, {'attr': {'class': 'form-control'}}) }}
			{{ form_errors(registerForm.plainPassword) }}
		</div>

		<div class="mb-3">
			{{ form_label(registerForm.confirmPassword) }}
			{{ form_widget(registerForm.confirmPassword, {'attr': {'class': 'form-control'}}) }}
			{{ form_errors(registerForm.confirmPassword) }}
		</div>

		<button type="submit" class="btn btn-success">S’inscrire</button>

		{{ form_end(registerForm) }}
	</form>
{% endblock %}


# templates/partials/_navbar.html.twig

<nav class="navbar navbar-expand-lg navbar-dark rounded-3 nav-bar-color px-3">
  <a class="navbar-brand fw-bold text-white" href="{{ path('accueil') }}">🌿 PlantShop</a>
  <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navBar">
    <span class="navbar-toggler-icon"></span>
  </button>

  <div class="collapse navbar-collapse" id="navBar">
    <ul class="navbar-nav ms-auto">
      {% if app.user %}
        <li class="nav-item d-flex align-items-center text-white px-2 text-capitalize">
          {{ app.user.name }}{% if app.user.admin %} (Administrateur){% endif %}
        </li>
      {% endif %}

      <li class="nav-item">
        <a class="nav-link nav-bar-buttons-color" id="cart-link" href="{{ path('panier_index') }}">Mon Panier</a>
      </li>

      {% if app.user %}
        <li class="nav-item">
          <a class="nav-link nav-bar-buttons-color" href="{{ path('commandes_index') }}">Mes commandes</a>
        </li>
        <li class="nav-item">
          <a class="nav-link nav-bar-buttons-color" href="{{ path('utilisateur_afficher', {id: app.user.id}) }}">Profil</a>
        </li>

        {% if app.user.admin %}
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle nav-bar-buttons-color" data-bs-toggle="dropdown" href="#">Admin</a>
            <ul class="dropdown-menu">
              <li><a class="dropdown-item" href="{{ path('admin_plantes_index') }}">Plantes</a></li>
              <li><a class="dropdown-item" href="{{ path('admin_utilisateurs_index') }}">Utilisateurs</a></li>
            </ul>
          </li>
        {% endif %}

        <li class="nav-item ms-2">
          <form method="post" action="{{ path('app_logout') }}" class="d-inline">
            <input type="hidden" name="_token" value="{{ csrf_token('logout') }}">
            <button type="submit" class="nav-link btn btn-link px-0 align-baseline nav-bar-buttons-color" style="text-decoration: none;">
              Déconnexion
            </button>
          </form>
        </li>
      {% else %}
        <li class="nav-item">
          <a class="nav-link nav-bar-buttons-color" href="{{ path('app_register') }}">S’inscrire</a>
        </li>
        <li class="nav-item">
          <a class="nav-link nav-bar-buttons-color" href="{{ path('app_login') }}">Se connecter</a>
        </li>
      {% endif %}
    </ul>
  </div>
</nav>


# templates/partials/_flash.html.twig

{% for type, messages in app.flashes %}
  {% for message in messages %}
    <div class="alert alert-{{ type == 'notice' or type == 'success' ? 'success' : 'danger' }} rounded-3">
      {{ message }}
    </div>
  {% endfor %}
{% endfor %}


# public/js/commande.js

fetch('/commandes', {
    method: 'POST',
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
    },
    body: 'items=' + encodeURIComponent(JSON.stringify(items)) // "items" = votre payload JS
})
.then(response => response.text().then(text => {
    if (!response.ok) {
        console.log('Erreur serveur :', text); // Affiche la réponse PHP dans la console JS
    } else {
        // Traitement normal si succès
    }
}));


# public/js/cart.js

/**
 * Gestionnaire de panier pour l'application PlantShop.
 *
 * Ce fichier contient la classe `Cart`, qui gère toutes les interactions liées au panier :
 * - Ajout, suppression, et mise à jour des produits.
 * - Sauvegarde des données dans `localStorage`.
 * - Affichage du panier dans la barre de navigation et dans les pages dédiées.
 *
 * Dépendances :
 * - Axios (pour les requêtes HTTP si nécessaire).
 * - DOM API pour manipuler les éléments HTML.
 *
 * @class Cart
 */
class Cart {
	/**
	 * Récupère le contenu du panier depuis `localStorage`.
	 *
	 * @returns {Object} Contenu du panier sous forme d'objet JSON.
	 * @example
	 * const cart = new Cart();
	 * const contenu = cart.get();
	 */
	get() {
		try {
			return JSON.parse(localStorage.getItem("cart") || "{}");
		} catch (e) {
			console.error("Erreur JSON", e);
			return {};
		}
	}

	/**
	 * Sauvegarde le panier dans `localStorage`.
	 *
	 * @param {Object} cart Contenu du panier à sauvegarder.
	 * @example
	 * const cart = new Cart();
	 * cart.save({ 1: { id: 1, name: "Plante", price: 10, quantity: 2 } });
	 */
	save(cart) {
		localStorage.setItem("cart", JSON.stringify(cart));
	}

	/**
	 * Ajoute un produit au panier.
	 *
	 * @param {number} id Identifiant unique du produit.
	 * @param {string} name Nom du produit.
	 * @param {number} price Prix unitaire du produit.
	 * @param {number} stock Quantité disponible en stock.
	 * @example
	 * const cart = new Cart();
	 * cart.add(1, "Plante Verte", 12.99, 10);
	 */
	add(id, name, price, stock) {
		const cart = this.get();
		if (cart[id]) {
			cart[id].quantity += 1;
		} else {
			cart[id] = { id, name, price, quantity: 1, stock };
		}
		this.save(cart);
		this.updateNavbarCount();
	}

	/**
	 * Met à jour la quantité d'un produit dans le panier.
	 *
	 * @param {number} id Identifiant unique du produit.
	 * @param {number|string} newQty Nouvelle quantité cible.
	 * @example
	 * const cart = new Cart();
	 * cart.update(1, 5);
	 */
	update(id, newQty) {
		const qty = parseInt(newQty);
		if (isNaN(qty)) return;

		const cart = this.get();
		if (!cart[id]) return;

		const input = document.querySelector(`input[data-cart-id="${id}"]`);
		const stock = parseInt(input?.dataset?.stock) || 1;

		let correctedQty = Math.max(1, Math.min(qty, stock));
		cart[id].quantity = correctedQty;
		if (input) input.value = correctedQty;

		this.save(cart);
		this.render();
	}

	/**
	 * Met à jour la quantité avec un délai (utilisé pour les champs de saisie).
	 *
	 * @param {number} id Identifiant unique du produit.
	 * @param {HTMLInputElement} inputElem Champ de saisie correspondant au produit.
	 * @example
	 * const input = document.querySelector('input[data-cart-id="1"]');
	 * cart.delayedUpdate(1, input);
	 */
	delayedUpdate(id, inputElem) {
		clearTimeout(inputElem._cartTimer);
		inputElem._cartTimer = setTimeout(() => {
			this.update(id, inputElem.value);
		}, 300);
	}

	/**
	 * Supprime un produit du panier.
	 *
	 * @param {number} id Identifiant unique du produit.
	 * @example
	 * const cart = new Cart();
	 * cart.remove(1);
	 */
	remove(id) {
		const cart = this.get();
		delete cart[id];
		this.save(cart);
		this.render();
	}

	/**
	 * Vide complètement le panier.
	 *
	 * @example
	 * const cart = new Cart();
	 * cart.clear();
	 */
	clear() {
		localStorage.removeItem("cart");
		this.render();
	}

	/**
	 * Met à jour le compteur d'articles dans la barre de navigation.
	 *
	 * @example
	 * const cart = new Cart();
	 * cart.updateNavbarCount();
	 */
	updateNavbarCount() {
		const cart = this.get();
		const count = Object.values(cart).reduce(
			(sum, item) => sum + item.quantity,
			0
		);
		const link = document.getElementById("cart-link");
		if (link) {
			link.innerText = `Mon Panier${count > 0 ? ` (${count})` : ""}`;
		}
	}

	/**
	 * Affiche le contenu complet du panier dans le conteneur HTML.
	 *
	 * @example
	 * const cart = new Cart();
	 * cart.render();
	 */
	render() {
		const container = document.getElementById("cart-container");
		if (!container) return;

		const cart = this.get();
		container.innerHTML = "";

		this.updateNavbarCount();

		if (Object.keys(cart).length === 0) {
			const alert = document.createElement("p");
			alert.className = "alert alert-info";
			alert.textContent = "Votre panier est vide.";
			container.appendChild(alert);
			const actions = document.getElementById("cart-actions");
			if (actions) {
				actions.classList.add("d-none");
			}
			return;
		}

		const table = document.createElement("table");
		table.className = "table";

		const thead = document.createElement("thead");
		thead.className = "table-danger";
		const headerRow = document.createElement("tr");
		["Plante", "Quantité", "Action"].forEach((text) => {
			const th = document.createElement("th");
			th.textContent = text;
			headerRow.appendChild(th);
		});
		thead.appendChild(headerRow);
		table.appendChild(thead);

		const tbody = document.createElement("tbody");
		let total = 0;

		for (const id in cart) {
			const item = cart[id];
			total += item.price * item.quantity;

			const row = document.createElement("tr");

			const tdName = document.createElement("td");
			const link = document.createElement("a");
			link.href = `/plantes/${id}`;
			link.className = "text-decoration-none";
			link.textContent = item.name;
			tdName.appendChild(link);

			const tdQty = document.createElement("td");
			const input = document.createElement("input");
			input.type = "number";
			input.min = "1";
			input.className = "form-control form-control-sm";
			input.style.maxWidth = "70px";
			input.value = item.quantity;
			input.dataset.cartId = id;
			input.dataset.stock = item.stock;
			input.oninput = () => this.delayedUpdate(id, input);
			tdQty.appendChild(input);

			const tdAction = document.createElement("td");
			const btn = document.createElement("button");
			btn.className = "btn btn-danger btn-sm";
			btn.textContent = "Retirer";
			btn.onclick = () => this.remove(id);
			tdAction.appendChild(btn);

			row.appendChild(tdName);
			row.appendChild(tdQty);
			row.appendChild(tdAction);
			tbody.appendChild(row);
		}

		table.appendChild(tbody);
		container.appendChild(table);

		const totalEl = document.createElement("p");
		totalEl.className = "text-end fw-bold";
		totalEl.textContent = `Total : ${total} €`;
		container.appendChild(totalEl);

		const actions = document.getElementById("cart-actions");
		if (actions) {
			actions.classList.toggle("d-none", Object.keys(cart).length === 0);
		}
	}

	/**
	 * Affiche le récapitulatif de commande dans la page nouvelle commande.
	 * Remplit aussi le champ masqué pour l'envoi du panier.
	 *
	 * @container HTMLElement cible contenant l'affichage de la commande
	 * @input     Champ hidden HTML pour sérialiser le panier
	 */
	renderOrderReview(
		containerId = "order-review-container",
		inputId = "order-items-input"
	) {
		const container = document.getElementById(containerId);
		const input = document.getElementById(inputId);
		if (!container || !input) return;

		const cart = this.get();

		if (Object.keys(cart).length === 0) {
			const alert = document.createElement("p");
			alert.className = "alert alert-warning";
			alert.textContent = "Votre panier est vide.";
			container.innerHTML = "";
			container.appendChild(alert);
			input.value = "";
			return;
		}

		const table = document.createElement("table");
		table.className = "table shadow";

		const thead = document.createElement("thead");
		thead.className = "table-danger";
		const headerRow = document.createElement("tr");
		["Plante", "Quantité", "Total"].forEach((text) => {
			const th = document.createElement("th");
			th.textContent = text;
			headerRow.appendChild(th);
		});
		thead.appendChild(headerRow);
		table.appendChild(thead);

		const tbody = document.createElement("tbody");
		let total = 0;
		const items = [];

		for (const id in cart) {
			const item = cart[id];
			const subtotal = item.price * item.quantity;
			total += subtotal;

			const row = document.createElement("tr");

			const tdName = document.createElement("td");
			const link = document.createElement("a");
			link.href = `/plantes/${item.id}`;
			link.className = "cart-plant-link";
			link.textContent = item.name;
			tdName.appendChild(link);

			const tdQty = document.createElement("td");
			tdQty.textContent = item.quantity;

			const tdTotal = document.createElement("td");
			tdTotal.textContent = `${subtotal} €`;

			row.appendChild(tdName);
			row.appendChild(tdQty);
			row.appendChild(tdTotal);

			tbody.appendChild(row);

			items.push({ plant_id: parseInt(id), quantity: item.quantity });
		}

		table.appendChild(tbody);
		container.innerHTML = "";
		container.appendChild(table);

		const totalEl = document.createElement("p");
		totalEl.className = "text-end fw-bold";
		totalEl.textContent = `Total : ${total} €`;
		container.appendChild(totalEl);

		input.value = JSON.stringify(items);
	}
}

// Initialisation

document.addEventListener("DOMContentLoaded", () => {
	window.Cart = new Cart();
	window.Cart.updateNavbarCount();
	window.Cart.render();
});


# public/css/custom.css

.nav-bar-color {
  background-color: #c62828;
}

.nav-bar-buttons-color {
  color: #ffbbb6;
  transition: color ease;
}

.nav-bar-buttons-color:hover {
  color: #5c1616;
}

==== STRUCTURE DU PROJET (filtres appliqués) ====
./
├── bin/
│   └── console
├── compose.override.yaml
├── composer.json
├── composer.lock
├── compose.yaml
├── config/
│   ├── bundles.php
│   ├── packages/
│   │   ├── cache.yaml
│   │   ├── csrf.yaml
│   │   ├── doctrine_migrations.yaml
│   │   ├── doctrine.yaml
│   │   ├── framework.yaml
│   │   ├── monolog.yaml
│   │   ├── routing.yaml
│   │   ├── security.yaml
│   │   ├── twig.yaml
│   │   └── validator.yaml
│   ├── preload.php
│   ├── routes/
│   │   ├── framework.yaml
│   │   └── security.yaml
│   ├── routes.yaml
│   └── services.yaml
├── .env
├── .env.dev
├── .git/
│   ├── branches/
│   ├── COMMIT_EDITMSG
│   ├── config
│   ├── description
│   ├── gitk.cache
│   ├── HEAD
│   ├── hooks/
│   │   ├── applypatch-msg.sample*
│   │   ├── commit-msg.sample*
│   │   ├── fsmonitor-watchman.sample*
│   │   ├── post-update.sample*
│   │   ├── pre-applypatch.sample*
│   │   ├── pre-commit.sample*
│   │   ├── pre-merge-commit.sample*
│   │   ├── prepare-commit-msg.sample*
│   │   ├── pre-push.sample*
│   │   ├── pre-rebase.sample*
│   │   ├── pre-receive.sample*
│   │   ├── push-to-checkout.sample*
│   │   ├── sendemail-validate.sample*
│   │   └── update.sample*
│   ├── index
│   ├── info/
│   │   └── exclude
│   ├── logs/
│   │   ├── HEAD
│   │   └── refs/
│   │       └── heads/
│   │           └── master
│   ├── objects/
│   │   ├── 01/
│   │   │   ├── 4a85e1b0b38760d281a42ba7078576482b34cf
│   │   │   └── c2a64bc828fdb49d884f52ee7a6f684bbedef0
│   │   ├── 03/
│   │   │   ├── 267ce159d47627fd7aa1082ca34f2cd755e9ea
│   │   │   ├── 5de27b7ab2e0afda4a424291aa37e3a81c3534
│   │   │   └── d9e07ca1011cc8d3b732ddf783559aaf9bac1f
│   │   ├── 04/
│   │   │   ├── 2e44828c3ecd2d0b35d0d04b6c19733e23e2ba
│   │   │   └── 9d24ed966cf7b18fcfb5e60e0934599601f7ce
│   │   ├── 05/
│   │   │   ├── 2073faca828c3b85f45b5de50cbb6cca61cd40
│   │   │   ├── 2103e2eaeb9516e4372d1c4aec16918647ce64
│   │   │   ├── 3df825df467e94c7cb303658f4dcd2f343a883
│   │   │   └── f267cb7aa3b2cb612e318a1f5d4b036655a1f1
│   │   ├── 06/
│   │   │   ├── e6535c82887143f06e62dc1c730b64cd0f2e12
│   │   │   └── f331800b055cbcb2d2993e33f8906e79bc9fc3
│   │   ├── 07/
│   │   │   ├── b1737a88f31854c74ae46f41c34c146d3b2ca4
│   │   │   └── c2d77ae0f51815addb1f2d364ab8a535d1f46d
│   │   ├── 08/
│   │   │   ├── 2e6df70adee2de9e54dfeb051b8c5a1a027cae
│   │   │   ├── af0a60791eef832809c0dc5f854e8ee7f71d61
│   │   │   └── f88afaaecebb02edaa79876af10d435095e18c
│   │   ├── 0a/
│   │   │   ├── 49f9543f95bf5a53985e4f4e6de21086bc5b7a
│   │   │   ├── 7bafcb7fc2b1396905f55f95b661de00a71604
│   │   │   └── aac7578419f6f7afed92a235d20f7f05816794
│   │   ├── 0b/
│   │   │   └── a4f6052b297d8904c4a3934fe3af76b1600ef5
│   │   ├── 0c/
│   │   │   └── 6e0decbd50ea7b2e760f681e8a8ab34f26724d
│   │   ├── 0e/
│   │   │   └── 85a14387fddb47ad49f085bd14a0f5f5c0036f
│   │   ├── 0f/
│   │   │   ├── 5f6bc3619fe0f21e8f42dde566fb75329393ee
│   │   │   ├── c74bbac4b757dd49782f0be496f6fd7e07e47c
│   │   │   ├── d8dfec7f57edcf1776918142ffc92957d5f044
│   │   │   └── ea0b03f06b84851e22446a25d95e45f9892eee
│   │   ├── 10/
│   │   │   ├── 0607e2bba05809dd5106db7ce67acc7450870e
│   │   │   ├── 22988717fe3ad07317325b181209fe465b77ad
│   │   │   ├── 69c1476fda90ed10c4e2662c87c092458a1b32
│   │   │   ├── 7a9d72a291eae715f91ae3415e6cb16116b75d
│   │   │   └── c692acccb0ebef533d62ad6d5fc054f6b83379
│   │   ├── 12/
│   │   │   ├── 64bb544cdbd2b8f1a2dfd3dfae9396ff6f3f19
│   │   │   └── bb4086ade75247b4cda6e3148fa64f7733789f
│   │   ├── 13/
│   │   │   ├── 2eb78090b484991c22c6feb7b786c6a24e6dbb
│   │   │   └── e659f186000bb6245642095fee37b9d00777cd
│   │   ├── 14/
│   │   │   └── f0c6d42a336d756fb5ebd0ae9c9b889e23ef0d
│   │   ├── 17/
│   │   │   └── 912f2c07ec8150293309ecc146c23eb31582eb
│   │   ├── 18/
│   │   │   ├── 2b8ed21060be17f6e4090de0327cb58c0d588b
│   │   │   ├── 4c95e292ac6ba4d02a0abc24bab0e5fa89a2ec
│   │   │   └── f54ad190b7d410f40cf1e0022fb00bb03f683c
│   │   ├── 1a/
│   │   │   └── 040392873171720d08c584c194c4c85073ffdc
│   │   ├── 1b/
│   │   │   └── d1fefd9f61dfa9da9f4b7040c71a97ce617a45
│   │   ├── 1c/
│   │   │   └── ec4b8ca5ad487b5e0257ffc912f8128aae1dda
│   │   ├── 1d/
│   │   │   └── 5e23bb76b1fa9dc92f047bd4b10a7848c27514
│   │   ├── 1e/
│   │   │   └── c6792e5a4caa70f0cdb38b7571a4e7bff2c5bc
│   │   ├── 20/
│   │   │   ├── 04d444a635085b8f54fd25765eda760c0a2e19
│   │   │   ├── b9b7d957f4fb4d755110c9e28477da6f4d63e7
│   │   │   ├── c74c2d98cfea0f91e0e8d3b19592881e1a1632
│   │   │   └── d26488df4c83c6d2397dca2607711b128686ce
│   │   ├── 21/
│   │   │   └── 33610be8a857e33e4aa920880b148026a01085
│   │   ├── 22/
│   │   │   └── ba1092f386474e7f7a0044701c867e6809cd92
│   │   ├── 23/
│   │   │   ├── 9219f38ab4dfe0077912402b1b37955955d486
│   │   │   └── e11b461a9bd6fdb8b0f930413ab6a3bc5975fa
│   │   ├── 24/
│   │   │   ├── 6f9e979ae758f640809661fb7fcc9971f2c783
│   │   │   └── c96186799d8be6822cb5cc8433bd3cca645456
│   │   ├── 25/
│   │   │   ├── 2e8e6fdc9f1ab4a2975e234968773f1428008e
│   │   │   ├── a2dfe19e53d688af6cb9a1b5efcdc08c6734a4
│   │   │   └── d446691bf9fd18572920a33ea426992570b1e5
│   │   ├── 26/
│   │   │   └── de3c7752beb48cb0bbd1c81972086e3d18e28d
│   │   ├── 27/
│   │   │   └── 57a8bf52fff502663ce9859509a210ce2b1018
│   │   ├── 29/
│   │   │   ├── 231d94bd1afd6f35b3c1e64687640d3f1e2f50
│   │   │   ├── dcd3d35360b1b2c3030711b3af05a0c6135985
│   │   │   └── ec29b2030dd6a41a6cd785a212992dcfb25e8f
│   │   ├── 2a/
│   │   │   ├── 45b710dfdea4327cc44facb3384345e6f5ed17
│   │   │   ├── acb3f5109a7fb8c400ac6e4bb12b1eb770850f
│   │   │   └── ad0103afdfd334e9fd736dae53f88bd60be661
│   │   ├── 2c/
│   │   │   └── e194ffe7ac74f32329d59f46a5f7b6014fd9c8
│   │   ├── 2d/
│   │   │   └── 6a76f94dce138741e2d63ae83a11c1879031d9
│   │   ├── 2f/
│   │   │   ├── 21c45aa9354f281734d0d757293cbb0b275730
│   │   │   └── da3a619c96fa30349fccb688de4086fc39cf1a
│   │   ├── 30/
│   │   │   └── b6db53a1c52d6217edf2ad9e6469aed726474f
│   │   ├── 31/
│   │   │   ├── 0ed68e5f65d31f032d1d7340713466db9a6946
│   │   │   ├── 1950a6b72205a6503b2f0617973850b359862d
│   │   │   └── ec5da468a00a5dd7fe78e01f2b335d5cf2267b
│   │   ├── 32/
│   │   │   ├── 9b29d14f9cb3b795a732015a3a5c2ad7d7532a
│   │   │   ├── b18ba94b83c9ca7f084e72af137f97f7d5c7aa
│   │   │   └── ef9e130217ffd9724127496875cbc0fb96aa15
│   │   ├── 34/
│   │   │   ├── ce750428aa4975a81acc1b0fec57b6fe44a4ca
│   │   │   └── e877ad51133f13097b91e03c06271486b89d40
│   │   ├── 36/
│   │   │   ├── 7af25a56d2decba5041becc5770b16c91b60d4
│   │   │   ├── dac4d733793371464abd8181707b66ef002d5e
│   │   │   └── ef72346ae37f8d1153f5f7d5343d55a3f8ae30
│   │   ├── 37/
│   │   │   └── 996185abc34a33c6badfcd4ebd402756c57933
│   │   ├── 39/
│   │   │   ├── 955c56b0c113fd2e3d6db9c63d10a9317cbd14
│   │   │   └── b65628bbaab258c5559c012ca1cc797aeff7d0
│   │   ├── 3a/
│   │   │   └── 4901eb37bae10b5ca243982ae604ce03d7e77f
│   │   ├── 3b/
│   │   │   ├── 992d5ed392d11a6d51a7c92b1dd01b570dc32d
│   │   │   └── 9eb8e667bfc27f5389a06ba631be41416c65ca
│   │   ├── 3c/
│   │   │   └── e538359351351fa6b50885cdbbee1a23aaa32a
│   │   ├── 3d/
│   │   │   └── a75f4442364e14784706a46f911c138a3f20ea
│   │   ├── 3e/
│   │   │   └── 1f6038f42636f80c4e1a3c8c96640a21fa39ca
│   │   ├── 3f/
│   │   │   ├── 795d921eae0f2961c18624a1ea9bdfeaca11d4
│   │   │   └── 81e29bb35b7ed9e65bd6f3b7418f8f96ad1cec
│   │   ├── 40/
│   │   │   └── d40405e1e9651723b0169bac8f1a36489021ea
│   │   ├── 41/
│   │   │   ├── 6b0468faa82384dd7005194f3d51e27d0dea84
│   │   │   ├── 8f2de10328c15398c025f43f7afdb73471ba5c
│   │   │   └── ef8140ba811c0da46ce1962ffa50d4c56b9840
│   │   ├── 42/
│   │   │   └── 641058a7d205ebd1556e0f937ac97323a3c6bb
│   │   ├── 43/
│   │   │   └── 892bba7fab8ceb23025dc201d1a8cbb9e026f6
│   │   ├── 44/
│   │   │   └── 277629cd6b0bbb5192b68db86f0036a8fda5e2
│   │   ├── 46/
│   │   │   └── 44127bac354e10fa5c2fba373db6001f59c7dc
│   │   ├── 48/
│   │   │   └── f2ca42b44fa6338b95f9c78b816a23b160021f
│   │   ├── 49/
│   │   │   └── 6f5e6e9afef860be3d3aaead4d9a8e2c627409
│   │   ├── 4a/
│   │   │   └── a05d908ce72ae4ed14819726e1d65854ce4a60
│   │   ├── 4c/
│   │   │   ├── 4d59dccc48d5f9274d92f39000298173750db4
│   │   │   └── 96134f6cb6dddc4fee28287a16a076d47b53a6
│   │   ├── 4e/
│   │   │   └── efe1537cefc8499226365c0483b0f534ad7022
│   │   ├── 4f/
│   │   │   ├── 91800787cbd83e261e9505eb45ed672d96c5b9
│   │   │   └── afb484ad2c311b4e590924bc4f93868f3f68fe
│   │   ├── 50/
│   │   │   └── b79862ea7d8a3858a9f3adeaf7ea124a32b0de
│   │   ├── 51/
│   │   │   ├── 76582e5f184cfcee87a658166392dd1c0da654
│   │   │   ├── 949a1066d7bb907eb65efd4aa0e5bbd8a0e43f
│   │   │   └── bb1cc2441ef3b80d03376e8b1dfac5ca6d53d5
│   │   ├── 52/
│   │   │   ├── 4995ba7accd482e673a1199a27a6c67736157f
│   │   │   └── 8bdcc084dde1077460ba9feb857953716cb384
│   │   ├── 53/
│   │   │   ├── d120bc1749da91d5801b089fe39ecadfe74368
│   │   │   └── e979685370923798d3da25456413313cba5288
│   │   ├── 54/
│   │   │   └── c6d8df5792dd7fccdc2cc7ffa222166e83032e
│   │   ├── 55/
│   │   │   └── a438fc479bb6d8ff6931c6a6cbce3b3bb7cfd0
│   │   ├── 56/
│   │   │   ├── 320321b47e1cae83f87efc50366fa763d53a14
│   │   │   └── b792684c21483ab11cd4d02d65acf9f7d507cd
│   │   ├── 57/
│   │   │   └── 4fd9b6e3714807a02adc03b71823e8e5d611e1
│   │   ├── 58/
│   │   │   └── b894582abb0989a132c98d563ac3c83b57e737
│   │   ├── 5a/
│   │   │   ├── c4e5305826ac533ced9d8561e97a87b8aa6a66
│   │   │   └── eb96491f7a44bb81e5d2e43b9fb1bc01d8fd64
│   │   ├── 5b/
│   │   │   ├── c38c185e130ca20faf1946627e408b92a9f7ff
│   │   │   ├── dcaed61f41abb1e2a70d57a55eeb7c6f1c2eda
│   │   │   └── f85ee24ec8a16d402406e9a1b92a8e34bda70e
│   │   ├── 5d/
│   │   │   └── f021e3c3703ed6ca92c9bda6fcec77c5bf29b7
│   │   ├── 5e/
│   │   │   └── bcdb2153c870e7d915f3b3fcdd55821424284c
│   │   ├── 60/
│   │   │   ├── 16958594c84a5d8425fcc76e62bb4d1fb663c9
│   │   │   └── 236aefeb2ecdc785e27ff419b275baaf27f6b1
│   │   ├── 61/
│   │   │   └── af2732aed0d33e53acd2caebd80f3ff9b2025c
│   │   ├── 62/
│   │   │   └── d6f0b530e9b2b90bc86a05193cf603b0760869
│   │   ├── 63/
│   │   │   ├── 028d770140ecd887ff512f8bb11dc9d0f48d51
│   │   │   └── 8b96aa994d970173c0b89f5ee011f7e4409639
│   │   ├── 64/
│   │   │   ├── 30f15e81e214e308e21a8dc3fe3c2464113693
│   │   │   ├── a235f5f9a90506ead6bd5d7093500d0c55ab5e
│   │   │   ├── b6b13d333c7e3a19702b2761c8051b4c699a77
│   │   │   └── c974bcfc92fd3eceeaf1ceabbb6472220b49b7
│   │   ├── 65/
│   │   │   ├── 0a9470e90986d869b3d2b545da8b70721ec14e
│   │   │   └── 7af7e6da4de3ee7faf059b280f7344359b86a3
│   │   ├── 67/
│   │   │   ├── 5a646c63faedaed5cd66da24210183da65241e
│   │   │   └── 93d32569c35830c1aee0df6bfce38d73d57281
│   │   ├── 68/
│   │   │   ├── 77b4b1f00a8bef1e2d9aeded2a303a863ee6cc
│   │   │   └── 99b72003fca67f5a56b945cd3e07f5c8a33774
│   │   ├── 69/
│   │   │   ├── 5a55d3063aff9d04d3fe24ac7170e8e968647b
│   │   │   └── 5c922c601e80b1c810f1913f86f77674509f90
│   │   ├── 6a/
│   │   │   ├── 88a72e3a2b9bf81bc27c6c2300ad573426f3e3
│   │   │   └── fa57e66ea86c7a192c5b0deca88188b4b81878
│   │   ├── 6b/
│   │   │   ├── 4322a116d27e2aee5f8b8e2327f91f192d9fbc
│   │   │   └── 69374a07c0b18cf928242c323e985ea379d593
│   │   ├── 6c/
│   │   │   ├── 03bb5f2165830323d3bdfe99612c4731a5d35d
│   │   │   ├── 623f3080fb2225ca27e43b980997f9e2a4efc1
│   │   │   ├── 7ba56aa2a1e46674ce74f0b6285a4e3a70824b
│   │   │   ├── 89ceacf33a3c1bc0d89e9ee301301fecf08c38
│   │   │   └── ca3227630f38480a0e35d1c734b499a387251d
│   │   ├── 6d/
│   │   │   ├── ea73a93b5be5bcea0eaf16d4cfe1002c65ca6a
│   │   │   └── feb5fbe3d7248e3e02d7e1946e5c8b135d6bf7
│   │   ├── 6e/
│   │   │   ├── 3a5c791e9a9cfa6431bf2354332604ae5293c0
│   │   │   ├── 50dd89388061412c39e975a05e13a20e7ec202
│   │   │   ├── 919663649008c688b3a69ff2aa894a30c6977b
│   │   │   └── b6d8687955f4342d582a5dc21b297692c6b127
│   │   ├── 70/
│   │   │   └── f03abd3ac0a55d31a08a7f5ebc91bf274fc633
│   │   ├── 71/
│   │   │   ├── 81aad23280458dd1b39f9166ffc0699a010b37
│   │   │   ├── c583cfa0fbda37e91a08628fbe818c5fc18ef5
│   │   │   └── c7ff00e5ddb0ef7f46bc080eafc1c26a63f88b
│   │   ├── 72/
│   │   │   ├── 06bb31e3ff306b255ef337da88ebe0588ad309
│   │   │   └── a0682dc0751620910e8a44eea77d96dec8235a
│   │   ├── 73/
│   │   │   ├── 7340450d709aa9b64c965e78de0f2bec950132
│   │   │   └── 8d17663d679d1fb495b225cc45eab3950f52e7
│   │   ├── 74/
│   │   │   └── 1fee830f7691c7090008eddeba68cb20c86a77
│   │   ├── 76/
│   │   │   ├── 1686716edcc8aa0a90d0d690ee94b8001063d3
│   │   │   └── b882f998d94561aea31c0434b282259564608d
│   │   ├── 77/
│   │   │   └── 9cd1f2b12e0d30731787539ba67645b73ef796
│   │   ├── 79/
│   │   │   └── 8ec0fc670857231f299625da3fc9f08a9ee9cb
│   │   ├── 7a/
│   │   │   ├── 6223db60692078449dfe6ff1cf385d00a39766
│   │   │   └── e28e436af94aa03e00b904890e39cb15160ee4
│   │   ├── 7b/
│   │   │   └── f3cedc766cfb5f6cdefc48e57d3240c9a6592e
│   │   ├── 7c/
│   │   │   └── 03a13bec05a94ab14332b91268387039300ba9
│   │   ├── 7d/
│   │   │   └── 8ce52899dcda03a9c7a4e85973ca78197b3d1c
│   │   ├── 7e/
│   │   │   ├── 20aa7570331c9050ae32186c073d58c7f6d1f6
│   │   │   ├── 2f3f2be6ec567a4a3a604a57b1b61fa090b6e2
│   │   │   └── f28ede96797b35cc048d55473f6290f8fb1991
│   │   ├── 7f/
│   │   │   └── 0985aa7fbebdc019e05a9c16c7d6de6cef4bb0
│   │   ├── 80/
│   │   │   ├── 4c1dfdf5600766ea816c78a6f7f126ce2c164d
│   │   │   └── 51f2ac0a02cacd3070ca8ff8afef613f6ba85a
│   │   ├── 81/
│   │   │   ├── 45bb87641d0fe520ef1e9a0386e93f6bfc8d6b
│   │   │   ├── 66181c68ab07bfac9aee6e482c7cc24031b8aa
│   │   │   ├── 8bdf420f06fedb6e48f903d3ed071f08e01ce1
│   │   │   ├── b86359511adabcc4c5fe9272a074910cdf8eb8
│   │   │   ├── ba7ea90687c62b065ba9e45148efe96a8e11f2
│   │   │   └── f5ed8244bf29bf8f99830aecdd1df1ca2c2b74
│   │   ├── 82/
│   │   │   ├── 55b47da5412a3e27720111cce668773d4b76f9
│   │   │   └── e3a754b6a0fcb238b03c0e47d05219fbf9cf89
│   │   ├── 83/
│   │   │   └── 0580f237ede3f6505ec449dbd3186bf755c868
│   │   ├── 84/
│   │   │   └── 4bfd70e829f2b566b8e36a15348d3768bb75c0
│   │   ├── 85/
│   │   │   └── 2aefa65547c142a852ad559f76f27156993019
│   │   ├── 86/
│   │   │   ├── 6c592595c7d7918b37bfefdae99e40ec4c7efc
│   │   │   ├── 8a596433e7873ba6cf0ec4efcee46bafe62e33
│   │   │   └── b62d19ffa8ee32829a29bfdc27b9dfbc18354d
│   │   ├── 87/
│   │   │   ├── 67504a8daeb18b9be3c46e3a44900ead4d5808
│   │   │   └── 7eb25d15da47921c07414c3b5d3a333cf889ff
│   │   ├── 88/
│   │   │   ├── 0f8650eef60d582c64b3db241703eda77476a4
│   │   │   └── 5ee0869e3e0b2bb1c44eacf1425ffcbdec29f7
│   │   ├── 89/
│   │   │   └── 60cccb45747b7cbe93dd669a57ed14ca982599
│   │   ├── 8a/
│   │   │   └── c1b1e27677dd760ced5d8176dd19faf7d40a40
│   │   ├── 8b/
│   │   │   ├── 4c212d3d3d49efcf5c66a8c53fadfeae4d9c1d
│   │   │   ├── b90bc714f5761305fe3c7bd211222fc822fbd1
│   │   │   ├── d9061d53c8d3913bbb31cc42a41726e128492f
│   │   │   └── e257ce1d7e82a6794adfe790202f03d7209587
│   │   ├── 8c/
│   │   │   ├── 7b0fd156142d85d759d7c60e11b896c4e6dbad
│   │   │   ├── 7e4daa37926479a9550814a59051c5e188a8f1
│   │   │   ├── c0326c1c2b9b359a6480320e57facf6182cf36
│   │   │   └── f3f6b2cb94c978e7039e4aa009eb064d0376a4
│   │   ├── 8d/
│   │   │   └── b05ac754b64763c6be08183c4b7e890fc3d7c6
│   │   ├── 8e/
│   │   │   └── efd71f41972c106a66c4eaad9b66295d13ef78
│   │   ├── 91/
│   │   │   ├── 70a4105a0c6f0dd9d8f585d35360848073dbaa
│   │   │   ├── 75c72d2b58eb85ef5399f66a22eeb629cb40f3
│   │   │   └── 91abbfb1b35a1c9ccdef722e2edf853e960963
│   │   ├── 94/
│   │   │   ├── 203f35c8fba1603bd1ef253d7fa710783c1c14
│   │   │   ├── 7c5eff1ac873a5aa0f4c71da773eaf54ca95b8
│   │   │   └── bd0984b15464de3bb077c38f35335fca8eae8b
│   │   ├── 95/
│   │   │   ├── 59ceee35b522b1fc000f53d380026d1e5a76d9
│   │   │   ├── 9f2c589806087100a3780025b473cb1d750d84
│   │   │   └── d2768bba86f7fa142d91dac3e461d34ecfd4a2
│   │   ├── 96/
│   │   │   └── 5055903137140d354a4f037a244c2434ff1b3b
│   │   ├── 97/
│   │   │   ├── 2cd3ef1d13a2394665228407233d90ff78ce3d
│   │   │   ├── 3c2c5124725591980da7b1ef9a056397379059
│   │   │   ├── 424b23a959d1842f07427082a16fdc7eee1f9c
│   │   │   ├── c425c7108dc4ff3793cb8c5e24eda290b4ae61
│   │   │   └── f32c9af11dbd7811bd035c0bf451ceebd546ed
│   │   ├── 98/
│   │   │   └── 2f46cb5e99a0420af627c128c446edb3500a8a
│   │   ├── 99/
│   │   │   ├── 5151b50e92d887c6d14507f5063aa505becd9d
│   │   │   ├── 82c218d6969c72d4c91e3834e3f535e2dfe68b
│   │   │   ├── e12ad1c2bedcafb4d744a2f0953c7d6a0cec07
│   │   │   └── e5a333ca0b8b9e3b372201cfbd03a03d94ee0e
│   │   ├── 9a/
│   │   │   └── 153b40e933861fb75827584204a77390e92f97
│   │   ├── 9b/
│   │   │   ├── 31df15d1118c2983fb6b1c276e38b276024411
│   │   │   ├── 3918fc99eaa34441409864972af2b4fdab39fb
│   │   │   └── 8c5fd15ca782a0ac49208c725f75ca010fb351
│   │   ├── 9e/
│   │   │   ├── 8cd00d6a34b1fdf4ce022bcfa061cd0576a41c
│   │   │   └── 994fe02ceb7264d5f72385dfde0c499f70817b
│   │   ├── 9f/
│   │   │   └── 908279afabd8b2494e8864ba9122b77b5bbbca
│   │   ├── a0/
│   │   │   └── 2a7ac0006d5877ac940b10d5c5248554df7d71
│   │   ├── a2/
│   │   │   ├── 0c05ed6d79e0c623691707c566fdddb247f8bd
│   │   │   ├── 9bf223c0f59d2cbb1469cf2e618f4bfb83f05d
│   │   │   └── bb53f0394443aed16657129f8940221b90bdfb
│   │   ├── a3/
│   │   │   ├── 05517c219d1ea74814a4ae6da22badd6c67b7d
│   │   │   └── ad434ac583d0c8a7baa4bfc81fff138888f657
│   │   ├── a4/
│   │   │   ├── 3b2c9831f2b0e5be0d36551ba0b32b6a6a3f60
│   │   │   ├── 3edd0f47bb15629c299ea8fcae16d3bd2970db
│   │   │   └── 6122a3756cbd9c4225241f338191fc2e56f752
│   │   ├── a5/
│   │   │   └── 921324594c1c162d14746dc586256407e82d28
│   │   ├── a6/
│   │   │   ├── 7f91e25c268247e2034877873a2b27f37619f0
│   │   │   └── 9d3d1dea4e4f065d8cf4b8df682b787f65064c
│   │   ├── a7/
│   │   │   ├── 2d3c8571c00912d46a5dafffdd540e5e9046ca
│   │   │   ├── 33a9c5e724b096e5bf63f46b4c797b7b2eca53
│   │   │   └── a3864876bf7b9ce15d08486d900bd773913312
│   │   ├── a8/
│   │   │   ├── 80b1a2deee8eb301a4400302abba2f8b389d1c
│   │   │   └── fa67f0f2d5f763d3988de560139434e18846d4
│   │   ├── aa/
│   │   │   ├── 4d5dafb7cc3ce3709b63212d2744c9eff80cfb
│   │   │   ├── 63e47f3d6e4628c8d8179272e102c7d3bdc063
│   │   │   ├── cc14a54977fc980dcc3a9ae075b8457aba73d0
│   │   │   └── f57de1ed423ef6a54322c3e4a6dcbcad04fcbe
│   │   ├── ab/
│   │   │   └── 1a6379122e3fa1b504be6704d8fd22491a2872
│   │   ├── ac/
│   │   │   ├── 3e5dff35a31c5f002928d561646cd2943f0962
│   │   │   └── c2abfc099da78ed06c15decaa017e816ce990c
│   │   ├── ad/
│   │   │   └── d9969ca33df1ba0be2d6a47e3a011349772cfa
│   │   ├── af/
│   │   │   ├── 22c7f0f50b518f7fe80e55736b9b5d706af17c
│   │   │   ├── 66555245d695b82100761cf66c9a122fd63dd7
│   │   │   └── 783367456e470f18c07e4e7667cfbeb0231d6f
│   │   ├── b0/
│   │   │   ├── 54fd84e00a77f43b2678347d45d34c5d928e2a
│   │   │   └── 7471c4ede6baff7225277a48262493f1ee7b70
│   │   ├── b1/
│   │   │   ├── 3d193172204ccc9302be95e9f73b47a585fa1a
│   │   │   └── c8aaa076d26aa87fa6c74fc9473bbe127b001a
│   │   ├── b2/
│   │   │   ├── 51d54fddad9edd4b0bb75c866a23c6fea36f2d
│   │   │   ├── 9153bdebc8c935907c000813740c61a20275d8
│   │   │   ├── e24c8f299830922b985bddd4b49a93ba64ae71
│   │   │   └── e4826e79698e2cc41a9fd358370c0efffd6f18
│   │   ├── b4/
│   │   │   ├── 1241ecc1cb4b39b6204aef79a2ae1314107e3f
│   │   │   ├── 89e11f92695ee37ce0ee16437396cb89b58f29
│   │   │   └── f9247afe96fc17bcb9dee23d3e2fbd6d3c31a5
│   │   ├── b5/
│   │   │   └── 0b3763b01b3a543c48b8928e565fe35686df42
│   │   ├── b6/
│   │   │   ├── 26900bde0e0ce1e476235ca845695730fe7968
│   │   │   └── d786ce173c08f31881c42a280fdee0dac1e3f6
│   │   ├── b7/
│   │   │   └── 59e370c3d4633a93011e90597ef6a3ffdadc32
│   │   ├── b8/
│   │   │   └── 6b977d6be01c5bfc7137c6a64b165ec436c9e6
│   │   ├── b9/
│   │   │   ├── 47b6eb8530aef35c41a4ed006d7d59b2384fc8
│   │   │   └── 4f89123cf268d05e67a8779a4d0a63085ae612
│   │   ├── ba/
│   │   │   ├── 811479186d5a21612698e4d7546e6406fe31c9
│   │   │   └── ad5689e8458ab3bb94465453c410a6928dd9c9
│   │   ├── bb/
│   │   │   ├── 095261620a1b567b40ccd35aebb164c9933a6f
│   │   │   ├── 2e10869c512839365fa6821a19d31b67fa3b0d
│   │   │   └── 42fadc17c68059dac83ea24cc2961299073faf
│   │   ├── bc/
│   │   │   ├── 51570cf8c51c18630c915de62c64936d1e1a46
│   │   │   ├── 54e41b4ccd2aa77fec03b96378e8d1d939269f
│   │   │   └── 5bcfcfdcda26c45ca11ba675f854276d19548c
│   │   ├── bd/
│   │   │   └── 576a22ab9f596c6137b5fc92e61786e4bfe548
│   │   ├── be/
│   │   │   └── 5e4dc46f7b63913bc773edb521c5f9e575d08c
│   │   ├── bf/
│   │   │   ├── 4081bb6fa6a5f1e3b659b2a8428ab8df4a57b2
│   │   │   ├── 6daad09b60b4ccfd296ad4ad3977dc8c01ea42
│   │   │   └── fa1d83528569933830b895f43ab100ca4cf5b2
│   │   ├── c0/
│   │   │   ├── 2dd27772ff377b1f570c7d5adb36883b48ebe8
│   │   │   └── fa590d8dca1cc3298aa2ca791f04d794e3744e
│   │   ├── c1/
│   │   │   └── ce59cf5841aaca1e612458acf78d7b99526d17
│   │   ├── c2/
│   │   │   ├── 17c337122f613e1e0dfece6f576193d312fa60
│   │   │   └── 414007691ac7644c05cd40b4df3227d6998033
│   │   ├── c3/
│   │   │   └── 066f5f2e35811065d2bdeb0a02871503ac2993
│   │   ├── c5/
│   │   │   ├── 0f1acc8a73d98959cad55182259bfa919e06cb
│   │   │   ├── 2fee4c07097591ae4cd68bda61d5f066f4c2f2
│   │   │   └── 612b0ad1957ade3aeb03176f49da20cda51469
│   │   ├── c7/
│   │   │   └── 7d36281e10b2af45acba498d96bae652707cc0
│   │   ├── c8/
│   │   │   ├── b060154058cb19d3bd5dccec2dc14a109664e7
│   │   │   └── b7d690b200ecc8179c1e9663379247a201d43b
│   │   ├── c9/
│   │   │   └── b0f7bc8cf51f968a643d4d9fec668eb8618ee6
│   │   ├── ca/
│   │   │   └── 67cfecb351b3394bf47b4074654592eae7f5e4
│   │   ├── cc/
│   │   │   ├── 114d5db2f408cca98550260c9c33d237d90706
│   │   │   ├── 55879a922951408b4787c57764d8c2b9931785
│   │   │   ├── 8b658b0e233d374942a43796124c5dbbdeb305
│   │   │   └── 8ce421f436a5337dee32d42b92118ec5fa13fd
│   │   ├── cd/
│   │   │   ├── 115af038e532766c586cef25497aba3464b6af
│   │   │   └── 4c7609a18a3c12cc8031383e2d0da669e3cb44
│   │   ├── ce/
│   │   │   └── 23fe0649bdb8a71de4ca785195771949f9cc89
│   │   ├── cf/
│   │   │   ├── 738acb65fcad6b305ed61ac8d32c4296c7b6c4
│   │   │   ├── d4ed3541352b4d4475a046423255675d89be18
│   │   │   └── de71f2437895076e94e2b1c7dac8e616cd08e9
│   │   ├── d0/
│   │   │   ├── 4abe9faaeab761af302283dccce4708cc51f35
│   │   │   ├── 4d8ba0098e2203e6626cd3d511a92d22f2def1
│   │   │   ├── 7411af655df49f4fb1ae089d0149fad9e8807c
│   │   │   ├── 7d9c175a62bc77b92c41c3e4bd250dcd493742
│   │   │   └── dc1c041eb4a1a0c5cb5955fc20266923e69ece
│   │   ├── d2/
│   │   │   └── 52fe3285a4d2478a753f8c9beeb62221305f39
│   │   ├── d4/
│   │   │   └── 2c52d6d2573bc94f3423d8f6d63a8eac3b61d8
│   │   ├── d5/
│   │   │   ├── d2f9ec0ce45209e9be89e5aa447745656607e1
│   │   │   └── de64c6679aeacf0b9b83945bb38b7ee7f4fdcf
│   │   ├── d6/
│   │   │   ├── 6f22415ba3b6c1576d31232ecc70b0e3968076
│   │   │   └── d66dcd0eb00eecf282843c7336670e752cd240
│   │   ├── d8/
│   │   │   ├── c63d7a759288fff327f60ca1e2933aca9a96d8
│   │   │   └── d530e2c36a68f7916acdfa16c9afafcad06bf0
│   │   ├── da/
│   │   │   ├── 68e7c0daa3a94480f3e0e987aee4b6212cf119
│   │   │   └── eb835ad04bde7cd4b2bdd767527c294dcaba8e
│   │   ├── db/
│   │   │   └── 843dd107beb1e05478b77097f3ee6438af9be3
│   │   ├── dc/
│   │   │   └── 2bcee6b679423923f424a0f969b90ea9a34f81
│   │   ├── dd/
│   │   │   ├── 3575773fca950f93429a5f25c62f6e92bb0e95
│   │   │   ├── 47a6ad82a8ecc3adc7dd22262ebe27b4b10534
│   │   │   ├── 704226ef776543bb9f8bd357ac5613c18b13cb
│   │   │   ├── 91fbf7439e7fef49a2cb4d917235c6fb550052
│   │   │   ├── ced4fd693d1f6ecfaeb32f0f6b9c3507753ccb
│   │   │   └── eca5a267bc4f47d5e1a7cd8bd15694f956cddf
│   │   ├── df/
│   │   │   └── a0b53527f1e5695357071f45c8d0dfbed67d87
│   │   ├── e0/
│   │   │   └── 8f52ffbd646212f865c877ac74058737a40611
│   │   ├── e2/
│   │   │   └── bead1a38d94ae4a700f2f100e925cdafbcc35a
│   │   ├── e3/
│   │   │   └── cc52fd13bc5fb3728b9d406c07e02f556bddb0
│   │   ├── e5/
│   │   │   └── 1659e24b09afa03ba4b2ac06320b9f865ddc21
│   │   ├── e6/
│   │   │   └── 9de29bb2d1d6434b8b29ae775ad8c2e48c5391
│   │   ├── e7/
│   │   │   └── 68ea90521839e354685eec742befafe49572b4
│   │   ├── e8/
│   │   │   └── a43562467d94b80781759fc8d301af68facd75
│   │   ├── e9/
│   │   │   └── 71363ed556315f7387ae64c51a040d0e8a97d6
│   │   ├── ea/
│   │   │   └── b670f9f31696542632f69cab80c90491dc7b65
│   │   ├── eb/
│   │   │   └── 13d2a8358189e71c79a8630b430556f694973c
│   │   ├── ed/
│   │   │   ├── 2fe51e29ee4768228d56ce2cbc9c466a7c7909
│   │   │   └── 35f3f3a06e2da27d36049ab581888c50afb7b2
│   │   ├── ef/
│   │   │   └── 4fda616cd4b19c642096fcbad18ed40ac4bfd5
│   │   ├── f0/
│   │   │   ├── 337a699d16460f8c5fbf48925d61aa13261f4c
│   │   │   └── 7048de8b960e6d463a3be80cca6e40d19b47db
│   │   ├── f1/
│   │   │   ├── 7ca5831f247f1bc2ffda73a6772aa78b0b9000
│   │   │   ├── ea71afbb0865df525f882641561f447fc79e2d
│   │   │   └── ec7e9752d5d5c00f09f220d756c9c7847b6697
│   │   ├── f2/
│   │   │   ├── 0084c967e429b0fd0e8e4d8ab8155fab368db2
│   │   │   ├── 1b280d578a4d9b110e4a5c3045c3bfe4e06ded
│   │   │   └── 443838b2b9d94febd7f0cf3f873a2024b25ddd
│   │   ├── f3/
│   │   │   └── 20cbd3ca320003afef7235734d8b525a608113
│   │   ├── f4/
│   │   │   ├── aac74b4ba55fd82cd404f791dddc48598a8980
│   │   │   ├── b52f612a2d4bbb3941af7da1580f68e9ec4cc4
│   │   │   └── c2b0ad50e108614d6789c290d090161a617e76
│   │   ├── f6/
│   │   │   ├── 3651e5b48615e01c9c27c9f4cc2a0dd069e62e
│   │   │   ├── 39cea99d64e1a14ea3d9f6b5d82d714234045b
│   │   │   ├── 4654376639f2d3739f092ce6b5473ae4d1b417
│   │   │   └── f71fb6e535d0bcc0421b84c82f3c8c20c8d633
│   │   ├── f7/
│   │   │   ├── 4bbd09239237bce6ba8cff480ccdc69970f344
│   │   │   └── 9e08d07b65bbab1c93d39650e7dc3505595b8f
│   │   ├── f8/
│   │   │   └── 53be15cf348ec1b6caaff738de0153eb9eeef0
│   │   ├── fa/
│   │   │   ├── 7595bcd614d32ad3e8c4a367afff48ca11e343
│   │   │   ├── 892ed21a09e47cd836261864e112fb2f1e4459
│   │   │   └── b5ada70f2dccc1e72c84d17db473e470324433
│   │   ├── fb/
│   │   │   └── de66a1a6cef81f8daa4cee769296a8b6dd3459
│   │   ├── fd/
│   │   │   └── e145056a3be33f3a67aaf0ab93f5a86c7fc7e2
│   │   ├── fe/
│   │   │   └── f7e7b8e4e446a146ddd134bd4bcd6a08641040
│   │   ├── info/
│   │   └── pack/
│   └── refs/
│       ├── heads/
│       │   └── master
│       └── tags/
├── .gitignore
├── Makefile
├── migrations/
│   ├── .gitignore
│   ├── Version20250512104230.php
│   ├── Version20250512104438.php
│   └── Version20250512105354.php
├── projet.txt
├── public/
│   ├── css/
│   │   └── custom.css
│   ├── index.php
│   └── js/
│       ├── cart.js
│       └── commande.js
├── src/
│   ├── Command/
│   │   ├── SeedDevCommand.php
│   │   └── VuesExistenceCheckCommand.php
│   ├── Controller/
│   │   ├── Admin/
│   │   │   ├── PlanteController.php
│   │   │   └── UtilisateurController.php
│   │   ├── CommandeController.php
│   │   ├── PanierController.php
│   │   ├── PlanteController.php
│   │   ├── RegistrationController.php
│   │   ├── SecurityController.php
│   │   └── UtilisateurController.php
│   ├── Entity/
│   │   ├── OrderItem.php
│   │   ├── Order.php
│   │   ├── Plant.php
│   │   └── User.php
│   ├── Form/
│   │   ├── PlanteType.php
│   │   ├── RegistrationForm.php
│   │   └── UserType.php
│   ├── Kernel.php
│   ├── Repository/
│   │   ├── OrderItemRepository.php
│   │   ├── OrderRepository.php
│   │   ├── PlantRepository.php
│   │   └── UserRepository.php
│   └── Security/
│       └── LoginFormAuthenticator.php
├── symfony.lock
├── templates/
│   ├── admin/
│   │   ├── plante/
│   │   │   ├── edit.html.twig
│   │   │   ├── index.html.twig
│   │   │   └── new.html.twig
│   │   └── utilisateur/
│   │       ├── edit.html.twig
│   │       ├── index.html.twig
│   │       └── show.html.twig
│   ├── base.html.twig
│   ├── commande/
│   │   ├── checkout.html.twig
│   │   ├── index.html.twig
│   │   ├── new.html.twig
│   │   └── success.html.twig
│   ├── panier/
│   │   └── index.html.twig
│   ├── partials/
│   │   ├── _flash.html.twig
│   │   └── _navbar.html.twig
│   ├── plante/
│   │   ├── index.html.twig
│   │   └── show.html.twig
│   ├── registration/
│   │   └── register.html.twig
│   ├── security/
│   │   └── login.html.twig
│   ├── user/
│   │   └── account.html.twig
│   └── utilisateur/
│       ├── edit.html.twig
│       ├── index.html.twig
│       └── show.html.twig
└── users.txt

246 directories, 496 files
